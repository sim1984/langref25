<!DOCTYPE chapter>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="internalfunc" xml:lang="ru">
    <info>
        <title>Встроенные функции и переменные</title>
    </info>
    <section xml:id="internalfunc-contextvar">
        <info>
            <title>Контекстные переменные</title>
        </info>
        <section xml:id="internalfunc-contextvar-current_connection">
            <info>
                <title>CURRENT_CONNECTION</title>
                <keywordset>
                    <keyword>CURRENT_CONNECTION</keyword>
                </keywordset>
            </info>
            <indexterm><primary>CURRENT_CONNECTION</primary></indexterm>
            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL, PSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
CURRENT_CONNECTION                      
                        </programlisting>
                </para>
            </formalpara>
            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>INTEGER</para>
            </formalpara>

            <para>Переменная CURRENT_CONNECTION хранит уникальный идентификатор текущего соединения.
                Значение переменной хранится в странице заголовка базы и сбрасывается после restore.
                Переменная увеличивается на единицу при каждом последующем соединении с базой данных
                (соединения также могут быть внутренними вызванными самим ядром). Следовательно,
                переменная показывает количество подключений произошедших к базе после её
                восстановления (или после её создания). </para>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной CURRENT_CONNECTION</title>
                        <para><programlisting language="sql">
SELECT CURRENT_CONNECTION FROM RDB$DATABASE                  
                </programlisting></para>
                    </example>
                </para>
            </formalpara>

            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-current_transaction"
                        >CURRENT_TRANSACTION</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-current_date">
            <info>
                <title>CURRENT_DATE</title>
                <keywordset>
                    <keyword>CURRENT_DATE</keyword>
                </keywordset>
            </info>
            <indexterm><primary>CURRENT_DATE</primary></indexterm>
            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL, PSQL, ESQL.</para>
            </formalpara>

            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
CURRENT_DATE                      
                        </programlisting>
                </para>
            </formalpara>

            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>DATE</para>
            </formalpara>

            <para>Переменная CURRENT_DATE возвращает текущую дату сервера. </para>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной CURRENT_DATE</title>
                        <para><programlisting language="sql">
CREATE DOMAIN DDATE_DNN AS
DATE DEFAULT CURRENT_DATE NOT NULL                
                </programlisting></para>
                    </example>
                </para>
            </formalpara>

            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-today">'TODAY'</link>, <link
                        linkend="internalfunc-contextvar-current_timestamp"
                    >CURRENT_TIMESTAMP</link>, <link linkend="internalfunc-contextvar-current_time"
                        >CURRENT_TIME</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-current_role">
            <info>
                <title>CURRENT_ROLE</title>
                <keywordset>
                    <keyword>CURRENT_ROLE</keyword>
                </keywordset>
            </info>

            <indexterm><primary>CURRENT_ROLE</primary></indexterm>

            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL, PSQL.</para>
            </formalpara>

            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
CURRENT_ROLE                      
                        </programlisting>
                </para>
            </formalpara>
            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>VARCHAR(31)</para>
            </formalpara>

            <para>Контекстная переменная CURRENT_ROLE служит для определения роли, с которой
                произошло подключение к базе данных. В случае если произошло подключение без
                указания роли, переменная принимает значение NONE.</para>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной CURRENT_ROLE</title>
                        <para><programlisting language="sql">
SELECT CURRENT_ROLE FROM RDB$DATABASE               
                </programlisting></para>
                    </example>
                </para>
            </formalpara>

            <note>
                <para>Такое же значение можно будет получить и в результате выполнения запроса:
                    <programlisting language="sql">
SELECT RDB$GET_CONTEXT ('SYSTEM', 'CURRENT_ROLE')
FROM RDB$DATABASE;
                    </programlisting>
                </para>
            </note>
            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-func-context-getcontext">RDB$GET_CONTEXT</link>.
                </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-current_time">
            <info>
                <title>CURRENT_TIME</title>
                <keywordset>
                    <keyword>CURRENT_TIME</keyword>
                </keywordset>
            </info>

            <indexterm><primary>CURRENT_TIME</primary></indexterm>

            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL, PSQL, ESQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
CURRENT_TIME [(<replaceable>&lt;precision&gt;</replaceable>)]

<replaceable>&lt;precision&gt;</replaceable> ::= 0 | 1 | 2 | 3                        
                        </programlisting>
                </para>
            </formalpara>
            <para>
                <variablelist>
                    <title>Параметры контекстной переменной CURRENT_TIME</title>
                    <varlistentry>
                        <term><replaceable>precision</replaceable></term>
                        <listitem>
                            <para>Точность. Значение по умолчанию 0. Не поддерживается в
                                ESQL.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>

            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>TIME</para>
            </formalpara>

            <para>Переменная CURRENT_TIME возвращает текущее время сервера. Точность определяет,
                сколько учитывать знаков после запятой в долях секунды.</para>
            <para/>
            <note>
                <para>В блоке кода PSQL (процедура, триггер, исполняемый блок) значение CURRENT_TIME
                    не меняется по мере выполнения. При вызове вложенного кода, значение также не
                    изменится и будет равно значению в коде самого верхнего уровня. Для определения
                    реального времени используйте другие переменные, например 'NOW' (с полным
                    приведением типа данных). </para>
            </note>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной CURRENT_TIME</title>
                        <para><programlisting language="sql">
SELECT CURRENT_TIME(2) FROM RDB$DATABASE;
-- результат будет (например) 23:35:33.1200            
                </programlisting></para>
                    </example>
                </para>
            </formalpara>

            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-now">'NOW'</link>, <link
                        linkend="internalfunc-contextvar-current_timestamp"
                    >CURRENT_TIMESTAMP</link>, <link linkend="internalfunc-contextvar-current_date"
                        >CURRENT_DATE</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-current_timestamp">
            <info>
                <title>CURRENT_TIMESTAMP</title>
                <keywordset>
                    <keyword>CURRENT_TIMESTAMP</keyword>
                </keywordset>
            </info>

            <indexterm><primary>CURRENT_TIMESTAMP</primary></indexterm>

            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL, PSQL, ESQL.</para>
            </formalpara>

            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
CURRENT_TIMESTAMP [(<replaceable>&lt;precision&gt;</replaceable>)]

<replaceable>&lt;precision&gt;</replaceable> ::= 0 | 1 | 2 | 3                        
                        </programlisting>
                </para>
            </formalpara>
            <para>
                <variablelist>
                    <title>Параметры контекстной переменной CURRENT_TIMESTAMP</title>
                    <varlistentry>
                        <term><replaceable>precision</replaceable></term>
                        <listitem>
                            <para>Точность. Значение по умолчанию 0. Не поддерживается в
                                ESQL.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>

            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>TIMESTAMP</para>
            </formalpara>

            <para>Переменная CURRENT_TIMESTAMP возвращает текущую дату и время сервера. Точность
                определяет, сколько учитывать знаков после запятой в долях секунды. </para>
            <note>
                <para>В блоке кода PSQL (процедура, триггер, исполняемый блок) значение
                    CURRENT_TIMESTAMP не меняется по мере выполнения. При вызове вложенного кода,
                    значение также не изменится и будет равно значению в коде самого верхнего
                    уровня. Для определения реального времени используйте другие переменные,
                    например 'NOW' (с полным приведением типа данных). </para>
            </note>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной CURRENT_TIMESTAMP</title>
                        <para><programlisting language="sql">
SELECT CURRENT_TIMESTAMP(2) FROM RDB$DATABASE;
-- результат будет (например) 02.03.2014 23:35:33.1200            
                </programlisting></para>
                    </example>
                </para>
            </formalpara>

            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-now">'NOW'</link>, <link
                        linkend="internalfunc-contextvar-current_time">CURRENT_TIME</link>, <link
                        linkend="internalfunc-contextvar-current_date">CURRENT_DATE</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-current_transaction">
            <info>
                <title>CURRENT_TRANSACTION</title>
                <keywordset>
                    <keyword>CURRENT_TRANSACTION</keyword>
                </keywordset>
            </info>

            <indexterm><primary>CURRENT_TRANSACTION</primary></indexterm>

            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL, PSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
CURRENT_TRANSACTION                      
                        </programlisting>
                </para>
            </formalpara>
            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>INTEGER</para>
            </formalpara>

            <para>Переменная CURRENT_TRANSACTION содержит уникальный номер текущей транзакции. </para>
            <para>Значение CURRENT_TRANSACTION хранится в странице заголовка базы данных и
                сбрасывается в 0 после восстановления (или создания базы). Оно увеличивается при
                старте новой транзакции.</para>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной CURRENT_TRANSACTION</title>
                        <para><programlisting language="sql">
SELECT CURRENT_TRANSACTION FROM RDB$DATABASE;

NEW.TRANS_ID = CURRENT_TRANSACTION;
                </programlisting></para>
                    </example>
                </para>
            </formalpara>

            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-current_connection"
                        >CURRENT_CONNECTION</link>, <link
                        linkend="internalfunc-func-context-getcontext">RDB$GET_CONTEXT</link>.
                </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-current_user">
            <info>
                <title>CURRENT_USER</title>
                <keywordset>
                    <keyword>CURRENT_USER</keyword>
                </keywordset>
            </info>

            <indexterm><primary>CURRENT_USER</primary></indexterm>

            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL, PSQL.</para>
            </formalpara>

            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
CURRENT_USER                      
                        </programlisting>
                </para>
            </formalpara>

            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>VARCHAR(31)</para>
            </formalpara>

            <para>Переменная CURRENT_USER содержит имя текущего подключенного пользователя базы
                данных. </para>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной CURRENT_USER</title>
                        <para><programlisting language="sql">
NEW.ADDED_BY = CURRENT_USER;
                </programlisting></para>
                    </example>
                </para>
            </formalpara>

            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-user">USER</link>, <link
                        linkend="internalfunc-contextvar-current_role">CURRENT_ROLE</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-deleting">
            <info>
                <title>DELETING</title>
                <keywordset>
                    <keyword>DELETING</keyword>
                </keywordset>
            </info>

            <indexterm><primary>DELETING</primary></indexterm>

            <formalpara>
                <title>Доступно в:</title>

                <para>PSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
DELETING                      
                        </programlisting>
                </para>
            </formalpara>

            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>BOOLEAN</para>
            </formalpara>

            <para>Контекстная переменная DELETING доступна только в коде табличных триггеров.
                Используется в триггерах на несколько типов событий и показывает, что триггер
                сработал при выполнении операции DELETE.</para>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной DELETING</title>
                        <para><programlisting language="sql">
...
IF (DELETING) THEN
BEGIN
  INSERT INTO REMOVED_CARS (
    ID, MAKE, MODEL, REMOVED)
  VALUES (
    OLD.ID, OLD.MAKE, OLD.MODEL, CURRENT_TIMESTAMP);
END
...
                </programlisting></para>
                    </example>
                </para>
            </formalpara>

            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-inserting">INSERTING</link>, <link
                        linkend="internalfunc-contextvar-updating">UPDATING</link>. </para>
            </formalpara>
        </section>

        <section xml:id="internalfunc-contextvar-gdscode">
            <info>
                <title>GDSCODE</title>
                <keywordset>
                    <keyword>GDSCODE</keyword>
                </keywordset>
            </info>

            <indexterm><primary>GDSCODE</primary></indexterm>

            <formalpara>
                <title>Доступно в:</title>

                <para>PSQL.</para>
            </formalpara>

            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
GDSCODE                      
                        </programlisting>
                </para>
            </formalpara>

            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>INTEGER</para>
            </formalpara>

            <para>В блоке обработки ошибок &quot;WHEN ... DO&quot; контекстная переменная GDSCODE
                содержит числовое представление текущего кода ошибки Firebird. До версии Firebird
                2.0 GDSCODE можно было получить только с использованием конструкции WHEN GDSCODE.
                Теперь эту контекстную переменную можно также использовать в блоках WHEN ANY, WHEN
                SQLCODE и WHEN EXCEPTION при условии, что код ошибки соответствует коду ошибки
                Firebird. Вне обработчика ошибок GDSCODE всегда равен 0. Вне PSQL GDSCODE не
                существует вообще. </para>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной GDSCODE</title>
                        <para><programlisting language="sql">
...
WHEN GDSCODE GRANT_OBJ_NOTFOUND,
     GDSCODE GRANT_FLD_NOTFOUND,
     GDSCODE GRANT_NOPRIV,
     GDSCODE GRANT_NOPRIV_ON_BASE
DO
BEGIN
  EXECUTE PROCEDURE LOG_GRANT_ERROR(GDSCODE);
  EXIT;
END
...
                </programlisting></para>
                    </example>
                </para>
            </formalpara>
            <note>
                <para>Обратите внимание: после, WHEN GDSCODE вы должны использовать символьные имена
                    — такие, как <replaceable>grant_obj_notfound</replaceable> и т.д. Но контекстная
                    переменная GDSCODE — целое число. Для сравнения его с определённой ошибкой вы
                    должны использовать числовое значение, например, 335544551 для
                        <replaceable>grant_obj_notfound</replaceable>.</para>
            </note>
            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-sqlcode">SQLCODE</link>, <link
                        linkend="internalfunc-contextvar-sqlstate">SQLSTATE</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-inserting">
            <info>
                <title>INSERTING</title>
                <keywordset>
                    <keyword>INSERTING</keyword>
                </keywordset>
            </info>

            <indexterm><primary>INSERTING</primary></indexterm>

            <formalpara>
                <title>Доступно в:</title>

                <para>PSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
INSERTING                      
                    </programlisting>
                </para>
            </formalpara>

            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>BOOLEAN</para>
            </formalpara>

            <para>Контекстная переменная INSERTING доступна только коде табличных триггеров.
                Используется в триггерах на несколько типов событий и показывает, что триггер
                сработал при выполнении операции INSERT. </para>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной INSERTING</title>
                        <para><programlisting language="sql">
...
IF (INSERTING OR UPDATING) THEN
BEGIN
  IF (NEW.SERIAL_NUM IS NULL) THEN
    NEW.SERIAL_NUM = GEN_ID (GEN_SERIALS, 1);
END
...
                </programlisting></para>
                    </example>
                </para>
            </formalpara>
            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-updating">UPDATING</link>, <link
                        linkend="internalfunc-contextvar-deleting">DELETING</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-new">
            <info>
                <title>NEW</title>
                <keywordset>
                    <keyword>NEW</keyword>
                </keywordset>
            </info>
            <indexterm><primary>NEW</primary></indexterm>
            <formalpara>
                <title>Доступно в:</title>

                <para>PSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
NEW                     
                    </programlisting>
                </para>
            </formalpara>

            <para>Контекстная переменная NEW доступна только в коде табличных триггеров. Значение
                NEW содержит новые значения полей данных, которое возникли в базе во время операции
                обновления или вставки.</para>
            <para>В AFTER триггерах переменная доступна только для чтения.</para>
            <note>
                <para>Для табличных триггеров, срабатывающих на несколько типов событий, переменная
                    NEW доступна всегда. Однако в случае если триггер сработал на операцию удаления,
                    то для него новая версия данных не имеет смысла. В этой ситуации чтение
                    переменной NEW всегда вернёт NULL.</para>
            </note>
            <important>
                <para>Попытка записи в переменную NEW в AFTER триггере вызовет исключение в коде.
                </para>
            </important>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной NEW</title>
                        <para><programlisting language="sql">
...
  IF (NEW.SERIAL_NUM IS NULL) THEN
    NEW.SERIAL_NUM = GEN_ID (GEN_SERIALS, 1);
...
                </programlisting></para>
                    </example>
                </para>
            </formalpara>
            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-old">OLD</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-now">
            <info>
                <title>'NOW'</title>
                <keywordset>
                    <keyword>'NOW'</keyword>
                </keywordset>
            </info>
            <indexterm><primary>NOW</primary></indexterm>
            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL, PSQL, ESQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
'NOW'                    
                    </programlisting>
                </para>
            </formalpara>

            <para>Не является переменной, а является строковым литералом. При использовании
                преобразования типов данных, например, с помощью функции CAST() в тип даты/времени
                позволяет получить текущую дату и/или время. Значение &quot;после запятой&quot; у
                переменной показывают число миллисекунд. Точность составляет 3 знака после запятой
                (миллисекунды). Написание 'NOW' зависит от регистра, при преобразовании в дату
                функция игнорирует все пробелы слева и справа от слова.</para>
            <note>
                <para>Поскольку 'NOW' всегда возвращает актуальные значения даты и времени при
                    использовании CAST() для приведения типов данных она может использоваться для
                    измерения временных интервалов и скорости выполнения кода в процедурах,
                    триггерах и блоках кода PSQL. Будьте внимательны при использовании 'NOW', т.к.
                    использование сокращённого преобразования типов 'NOW' оценивается во время
                    синтаксического анализа, а затем время её &quot;замораживается&quot;, даже при
                    многократном выполнении кода. </para>
            </note>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной 'NOW'</title>
                        <para><programlisting language="sql">
SELECT CAST('Now' AS DATE) FROM rdb$database;
-- возвратит, например 2014-10-03

SELECT CAST('now' AS TIME) FROM rdb$database;
-- возвратит, например 14:20:19.6170

SELECT CAST('NOW' AS TIMESTAMP) FROM rdb$database;
-- возвратит, например 2014-10-03 14:20:19.6170
                </programlisting></para>
                    </example>
                </para>
            </formalpara>
            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-current_timestamp"
                        >CURRENT_TIMESTAMP</link>, <link
                        linkend="internalfunc-contextvar-current_date">CURRENT_DATE</link>, <link
                        linkend="internalfunc-contextvar-current_time">CURRENT_TIME</link>, <link
                        linkend="internalfunc-contextvar-today">TODAY</link>, <link
                        linkend="internalfunc-contextvar-tomorrow">TOMORROW</link>, <link
                        linkend="internalfunc-contextvar-yesterday">YESTERDAY</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-old">
            <info>
                <title>OLD</title>
                <keywordset>
                    <keyword>OLD</keyword>
                </keywordset>
            </info>
            <indexterm><primary>OLD</primary></indexterm>
            <formalpara>
                <title>Доступно в:</title>

                <para>PSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
OLD                     
                    </programlisting>
                </para>
            </formalpara>

            <para>Контекстная переменная OLD доступна только коде триггеров. Значения, содержащееся
                в OLD, хранит прошлые значения полей, которые были в базе до операции изменения или
                удаления.</para>
            <para>Переменная OLD доступна только для чтения.</para>
            <note>
                <para>Для табличных триггеров, срабатывающих на несколько типов событий, значения
                    для переменной OLD всегда возможны. Однако для триггеров, сработавших на вставку
                    записи, значение данной переменной не имеет смысла, поэтому в этой ситуации
                    чтение OLD возвратит NULL, а попытка записи в неё вызовет исключение в
                    коде.</para>
            </note>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной OLD</title>
                        <para><programlisting language="sql">
...
  IF (NEW.QUANTITY IS DISTINCT FROM OLD.QUANTITY) THEN
    DELTA = NEW.QUANTITY - OLD.QUANTITY;
...
                </programlisting></para>
                    </example>
                </para>
            </formalpara>
            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-new">NEW</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-row_count">
            <info>
                <title>ROW_COUNT</title>
                <keywordset>
                    <keyword>ROW_COUNT</keyword>
                </keywordset>
            </info>

            <indexterm><primary>ROW_COUNT</primary></indexterm>

            <formalpara>
                <title>Доступно в:</title>

                <para>PSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
ROW_COUNT                     
                    </programlisting>
                </para>
            </formalpara>

            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>INTEGER</para>
            </formalpara>

            <para>Контекстная переменная ROW_COUNT содержит число строк, затронутых последним
                оператором DML (INSERT, UPDATE, DELETE, SELECT или FETCH) в текущем триггере,
                хранимой процедуре или исполняемом блоке.</para>
            <para>Поведение с SELECT и FETCH: <itemizedlist spacing="compact">
                    <listitem>
                        <para>После выполнения singleton SELECT запроса (запроса, который может
                            вернуть не более одной строки данных), ROW_COUNT равна 1, если была
                            получена строка данных и 0 в противном случае;</para>
                    </listitem>
                    <listitem>
                        <para>В цикле <link linkend="psql-operators-forselect">FOR SELECT</link>
                            переменная ROW_COUNT увеличивается на каждой итерации (начиная с 0 в
                            качестве первого значения);</para>
                    </listitem>
                    <listitem>
                        <para>После выборки (FETCH) из курсора, ROW_COUNT равна 1, если была
                            получена строка данных и 0 в противном случае. Выборка нескольких
                            записей из одного курсора не увеличивает ROW_COUNT после 1.</para>
                    </listitem>
                </itemizedlist>
            </para>
            <important>
                <para>Переменная ROW_COUNT не может быть использована для определения количества
                    строк, затронутых при выполнении операторов EXECUTE STATEMENT или EXECUTE
                    PROCEDURE. Для оператора MERGE переменная ROW_COUNT будет содержать 0 или 1,
                    даже если было затронуто более записей </para>
            </important>
            <warning>
                <para>Не используйте переменную ROW_COUNT внутри DML операторов. Дело в том, что эта
                    переменная сбрасывает своё значение в 0 перед началом выполнения любого DML
                    оператора, а потому вы можете получить не то что ожидаете.
                    <programlisting language="sql">
...                        
UPDATE t2 SET 
    evt='upd', 
    old_id = old.id, old_x = old.x, 
    new_id = new.id, new_x = new.x
WHERE new_id = old.id;

INSERT INTO t2log(evt, affected_rows) VALUES('upd', ROW_COUNT); 
...
                    </programlisting>
                    В вышеприведённом примере в столбец affected_rows будут записаны нулевые
                    значения, даже если оператором UPDATE были затронуты строки. Для того, чтобы
                    исправить эту ошибку, необходимо сохранить значение контекстной переменной
                    ROW_COUNT в локальную переменную PSQL модуля и использовать эту локальную
                    переменную в DML операторе.
                    <programlisting language="sql">
...                        
DECLARE rc INT;                        
...                        
UPDATE t2 SET 
    evt='upd', 
    old_id = old.id, old_x = old.x, 
    new_id = new.id, new_x = new.x
WHERE new_id = old.id;

rc = ROW_COUNT;
INSERT INTO t2log(evt, affected_rows) VALUES('upd', rc); 
...
                    </programlisting>
                </para>
            </warning>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной ROW_COUNT</title>
                        <para><programlisting language="sql">
...
UPDATE Figures SET Number = 0 WHERE id = :id;
IF (row_count = 0) THEN
  INSERT INTO Figures (id, Number) 
  VALUES (:id, 0);
...
                </programlisting></para>
                    </example>
                </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-sqlcode">
            <info>
                <title>SQLCODE</title>
                <keywordset>
                    <keyword>SQLCODE</keyword>
                </keywordset>
            </info>
            <indexterm><primary>SQLCODE</primary></indexterm>
            <formalpara>
                <title>Доступно в:</title>

                <para>PSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
SQLCODE                      
                        </programlisting>
                </para>
            </formalpara>
            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>INTEGER</para>
            </formalpara>

            <para>В блоках обработки ошибок &quot;WHEN ... DO&quot; контекстная переменная SQLCODE
                содержит текущий код ошибки SQL. До Firebird 2.0 значение SQLCODE можно было
                получить только в блоках обработки ошибок WHEN SQLCODE и WHEN ANY. Теперь она может
                быть отлична от нуля в блоках WHEN GDSCODE и WHEN EXCEPTION при условии, что ошибка,
                вызвавшее срабатывание блока, соответствует коду ошибки SQL. Вне обработчиков ошибок
                SQLCODE всегда равен 0, а вне PSQL не существует вообще.</para>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной SQLCODE</title>
                        <para><programlisting language="sql">
...
WHEN ANY DO
BEGIN
  IF (SQLCODE &lt;&gt; 0) THEN
    MSG = 'Обнаружена ошибка SQL!';
  ELSE
    MSG = 'Ошибки нет!';
  EXCEPTION EX_CUSTOM MSG;
END
...
                </programlisting></para>
                    </example>
                </para>
            </formalpara>

            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-gdscode">GDSCODE</link>, <link
                        linkend="internalfunc-contextvar-sqlstate">SQLSTATE</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-sqlstate">
            <info>
                <title>SQLSTATE</title>
                <keywordset>
                    <keyword>SQLSTATE</keyword>
                </keywordset>
            </info>
            <indexterm><primary>SQLSTATE</primary></indexterm>
            <formalpara>
                <title>Доступно в:</title>

                <para>PSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
SQLSTATE                      
                        </programlisting>
                </para>
            </formalpara>
            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>CHAR(5)</para>
            </formalpara>

            <para>В блоках обработки ошибок &quot;WHEN ... DO&quot; контекстная переменная SQLSTATE
                переменная содержит 5 символов SQL-2003 — совместимого кода состояния, переданного
                оператором, вызвавшим ошибку. Вне обработчиков ошибок SQLSTATE всегда равен '00000',
                а вне PSQL не существует вообще.</para>
            <note>
                <para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>SQLSTATE предназначен для замены SQLCODE. Последняя, в настоящее
                                время устарела и буден удалена будущих версиях Firebird;</para>
                        </listitem>
                        <listitem>
                            <para>Firebird 2.5 не поддерживает синтаксис "WHEN SQLSTATE ... DO".
                                Используйте обработчик блока WHEN ANY для проверки значения
                                переменной SQLSTATE;</para>
                        </listitem>
                        <listitem>
                            <para>Любой код SQLSTATE состоит из двух символов класса и трёх символов
                                подкласса. Класс 00 (успешное выполнение), 01 (предупреждение) и 02
                                (нет данных) представляют собой условия завершения. Каждый код
                                статуса вне этих классов является исключением. Поскольку классы 00,
                                01 и 02 не вызывают ошибку, они никогда не будут обнаруживаться в
                                переменной SQLSTATE.</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </note>

            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной SQLSTATE</title>
                        <para><programlisting language="sql">
WHEN ANY DO
BEGIN
  MSG = CASE SQLSTATE
          WHEN '22003' THEN
            'Число вышло за пределы диапазона!'
          WHEN '22012' THEN
            'Деление на ноль!'
          WHEN '23000' THEN
            'Нарушение ограничения целостности!'
          ELSE 'Ошибок нет! SQLSTATE = ' || SQLSTATE;
        END;
  EXCEPTION EX_CUSTOM MSG;
END
                </programlisting></para>
                    </example>
                </para>
            </formalpara>

            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-gdscode">GDSCODE</link>, <link
                        linkend="internalfunc-contextvar-sqlcode">SQLCODE</link>, <link
                        linkend="error">Коды ошибок SQLSTATE и их описание</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-today">
            <info>
                <title>'TODAY'</title>
                <keywordset>
                    <keyword>'TODAY'</keyword>
                </keywordset>
            </info>

            <indexterm><primary>TODAY</primary></indexterm>

            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL, PSQL, ESQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
'TODAY'                    
                    </programlisting>
                </para>
            </formalpara>

            <para>Не является переменной, а является строковым литералом. При использовании
                преобразования типов данных, например, с помощью функции CAST() в тип даты/времени
                позволяет получить текущую дату. Написание 'TODAY' не зависит от регистра, при
                преобразовании в дату функция игнорирует все пробелы слева и справа от слова.</para>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной 'TODAY'</title>
                        <para><programlisting language="sql">
SELECT CAST('Today' AS DATE) FROM rdb$database;
 -- возвратит, например 2014-10-03
SELECT CAST('TODAY' AS TIMESTAMP) FROM rdb$database;
 -- возвратит, например 2014-10-03 00:00:00.0000

-- при использовании короткого, "C-Style" преобразования:
SELECT DATE 'Today' FROM rdb$database;
SELECT TIMESTAMP 'TODAY' FROM rdb$database;
                </programlisting></para>
                    </example>
                </para>
            </formalpara>

            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-current_date">CURRENT_DATE</link>, <link
                        linkend="internalfunc-contextvar-tomorrow">TOMORROW</link>, <link
                        linkend="internalfunc-contextvar-yesterday">YESTERDAY</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-tomorrow">
            <info>
                <title>'TOMORROW'</title>
                <keywordset>
                    <keyword>'TOMORROW'</keyword>
                </keywordset>
            </info>

            <indexterm><primary>TOMORROW</primary></indexterm>

            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL, PSQL, ESQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
'TOMORROW'                    
                    </programlisting>
                </para>
            </formalpara>

            <para>Не является переменной, а является строковым литералом. При использовании
                преобразования, например, с помощью функции CAST() в тип даты / времени позволяет
                получить дату, следующую за текущей.</para>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной 'TOMORROW'</title>
                        <para><programlisting language="sql">
SELECT CAST('Tomorrow' AS DATE) FROM rdb$database;
-- возвратит, например 2014-10-04

SELECT CAST('TOMORROW' AS TIMESTAMP) FROM rdb$database;
-- возвратит, например 2014-10-04 00:00:00.0000

-- при использовании короткого, "C-Style" преобразования:
SELECT DATE 'Tomorrow' FROM rdb$database;
                </programlisting></para>
                    </example>
                </para>
            </formalpara>

            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-current_date">CURRENT_DATE</link>, <link
                        linkend="internalfunc-contextvar-today">TODAY</link>, <link
                        linkend="internalfunc-contextvar-yesterday">YESTERDAY</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-updating">
            <info>
                <title>UPDATING</title>
                <keywordset>
                    <keyword>UPDATING</keyword>
                </keywordset>
            </info>

            <indexterm><primary>UPDATING</primary></indexterm>

            <formalpara>
                <title>Доступно в:</title>

                <para>PSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
UPDATING                     
                        </programlisting>
                </para>
            </formalpara>
            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>BOOLEAN</para>
            </formalpara>

            <para>Контекстная переменная UPDATING доступна только коде табличных триггеров.
                Используется в триггерах на несколько типов событий и показывает, что триггер
                сработал при выполнении операции UPDATE. </para>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной UPDATING</title>
                        <para><programlisting language="sql">
...
IF (INSERTING OR UPDATING) THEN
BEGIN
  IF (NEW.SERIAL_NUM IS NULL) THEN
    NEW.SERIAL_NUM = GEN_ID (GEN_SERIALS, 1);
END
...
                </programlisting></para>
                    </example>
                </para>
            </formalpara>

            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-inserting">INSERTING</link>, <link
                        linkend="internalfunc-contextvar-deleting">DELETING</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-yesterday">
            <info>
                <title>'YERSTERDAY'</title>
                <keywordset>
                    <keyword>'YERSTERDAY'</keyword>
                </keywordset>
            </info>

            <indexterm><primary>YERSTERDAY</primary></indexterm>

            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL, PSQL, ESQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
'YERSTERDAY'                    
                    </programlisting>
                </para>
            </formalpara>

            <para>Не является переменной, а является строковым литералом. При использовании
                преобразования, например, с помощью функции CAST() в тип даты / времени позволяет
                получить дату, предыдущую перед текущей.</para>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной 'YERSTERDAY'</title>
                        <para><programlisting language="sql">
SELECT CAST('Yesterday' AS DATE) FROM rdb$database;
--возвратит, например 2014-10-04

-- при использовании короткого, "C-Style" преобразования
SELECT DATE 'Yesterday' FROM rdb$database;
SELECT TIMESTAMP 'YESTERDAY' FROM rdb$database;
                </programlisting></para>
                    </example>
                </para>
            </formalpara>

            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-current_date">CURRENT_DATE</link>, <link
                        linkend="internalfunc-contextvar-today">TODAY</link>, <link
                        linkend="internalfunc-contextvar-tomorrow">TOMORROW</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-contextvar-user">
            <info>
                <title>USER</title>
                <keywordset>
                    <keyword>USER</keyword>
                </keywordset>
            </info>

            <indexterm><primary>USER</primary></indexterm>

            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL, PSQL.</para>
            </formalpara>

            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
USER                      
                        </programlisting>
                </para>
            </formalpara>
            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>VARCHAR(31)</para>
            </formalpara>

            <para>Переменная USER содержит имя текущего подключенного пользователя базы данных. </para>
            <formalpara>
                <title>Примеры:</title>
                <para>
                    <example>
                        <title>Использование переменной USER</title>
                        <para><programlisting language="sql">
NEW.ADDED_BY = USER;
                </programlisting></para>
                    </example>
                </para>
            </formalpara>
            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="internalfunc-contextvar-current_user">CURRENT_USER</link>, <link
                        linkend="internalfunc-contextvar-current_role">CURRENT_ROLE</link>. </para>
            </formalpara>
        </section>
    </section>
    <section xml:id="internalfunc-func">
        <info>
            <title>Скалярные функции</title>
        </info>
        <note>
            <para>Если в вашей базе данных имя декларированной внешней функции (DECLARE EXTERNAL
                FUNCTION) совпадает с именем встроенной, то будет вызываться внешняя функция. Для
                того чтобы была доступна внутренняя функция, необходимо удалить или изменить имя
                внешней функции. </para>
        </note>
        <section xml:id="internalfunc-func-context">
            <info>
                <title>Функции для работы с контекстными переменными</title>
            </info>
            <para/>
            <section xml:id="internalfunc-func-context-getcontext">
                <info>
                    <title>RDB$GET_CONTEXT</title>
                </info>
                <indexterm><primary>RDB$GET_CONTEXT</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
RDB$GET_CONTEXT('<replaceable>&lt;namespace&gt;</replaceable>', '<replaceable>varname</replaceable>')   
                            
<replaceable>&lt;namespace&gt;</replaceable> ::= SYSTEM | USER_SESSION | USER_TRANSACTION                            
                </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции RDB$GET_CONTEXT</title>
                        <varlistentry>
                            <term><replaceable>namespace</replaceable></term>
                            <listitem>
                                <para>Пространство имён.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>varname</replaceable></term>
                            <listitem>
                                <para>Имя переменной. Зависит от регистра. Максимальная длина 80
                                    символов.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>VARCHAR(255)</para>
                </formalpara>

                <para>Функция RDB$GET_CONTEXT возвращает значение контекстной переменной из одного
                    из пространства имён.</para>
                <para>В настоящий момент существуют следующие пространства имён: <itemizedlist
                        spacing="compact">
                        <listitem>
                            <para>SYSTEM — предоставляет доступ к системным контекстным переменным.
                                Эти переменные доступны только для чтения;</para>
                        </listitem>
                        <listitem>
                            <para>USER_SESSION — предоставляет доступ к пользовательским контекстным
                                переменным, заданным через функцию RDB$SET_CONTEXT. Переменные
                                существуют в течение подключения;</para>
                        </listitem>
                        <listitem>
                            <para>USER_TRANSACTION — предоставляет доступ к пользовательским
                                контекстным переменным, заданным через функцию RDB$SET_CONTEXT.
                                Переменные существуют в течение транзакции.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>Пространства имён USER_SESSION и USER_TRANSACTION — изначально пусты и
                    пользователь сам создаёт переменные и наполняет их при помощи функции
                    RDB$SET_CONTEXT.</para>
                <note>
                    <para>Для предотвращения DoS атак, существует ограничение на 1000 переменных в
                        одном &quot;пространстве имён&quot;.</para>
                </note>
                <para>Если запрашиваемая функцией переменная существует в указанном пространстве
                    имён, то будет возвращено её значение в виде строки VARCHAR(255). При обращении
                    к несуществующей переменной в пространстве SYSTEM возникает ошибка, если такое
                    происходит с пространствами имён USER_SESSION или USER_TRANSACTION – функция
                    возвращает NULL.</para>
                <para>
                    <table frame="all">
                        <title>Переменные пространства имён SYSTEM</title>
                        <tgroup cols="2">
                            <colspec colname="c1" colnum="1" colwidth="1.0*" align="left"/>
                            <colspec colname="c2" colnum="2" colwidth="2.0*" align="justify"/>
                            <thead>
                                <row>
                                    <entry align="center"> Переменная </entry>
                                    <entry align="center"> Описание </entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                    <entry>CLIENT_ADDRESS</entry>
                                    <entry>Для TCPv 4 – IP адрес, для XNET – локальный ID процесса.
                                        Для остальных случаев NULL.</entry>
                                </row>
                                <row>
                                    <entry>CLIENT_PID</entry>
                                    <entry>PID процесса на клиентском компьютере. Добавлено в версии
                                        2.5.3.</entry>
                                </row>
                                <row>
                                    <entry>CLIENT_PROCESS</entry>
                                    <entry>Полный путь к клиентскому приложению, подключившемуся к
                                        базе данных. Позволяет не использовать системную таблицу
                                        MON$ATTACHMENTS (поле MON$REMOTE_PROCESS). Добавлено в
                                        версии 2.5.3.</entry>
                                </row>
                                <row>
                                    <entry> CURRENT_ROLE</entry>
                                    <entry> Глобальная переменная CURRENT_ROLE.</entry>
                                </row>
                                <row>
                                    <entry>CURRENT_USER</entry>
                                    <entry>Глобальная переменная CURRENT_USER.</entry>
                                </row>
                                <row>
                                    <entry>DB_NAME</entry>
                                    <entry>Полный путь к базе данных или алиас к базе данных, из
                                        строки подключения к базе данных.</entry>
                                </row>
                                <row>
                                    <entry>ENGINE_VERSION</entry>
                                    <entry>Версия сервера Firebird. </entry>
                                </row>
                                <row>
                                    <entry>ISOLATION_LEVEL</entry>
                                    <entry>Уровень изоляции текущей транзакции —
                                        CURRENT_TRANSACTION. Значения: &quot;READ_COMMITED&quot;,
                                        &quot;SNAPSHOT&quot; или &quot;CONSISTENCY&quot;. </entry>
                                </row>
                                <row>
                                    <entry>LOCK_TIMEOUT</entry>
                                    <entry>Время ожидания транзакцией высвобождения ресурса при
                                        блокировке, в секундах. Добавлено в версии 2.5.3.</entry>
                                </row>
                                <row>
                                    <entry>NETWORK_PROTOCOL</entry>
                                    <entry>Протокол, используемый для соединения с базой данных.
                                        Возможные значения: &quot;TCPv4&quot;, &quot;WNET&quot;,
                                        &quot;XNET&quot;,  NULL. </entry>
                                </row>
                                <row>
                                    <entry>READ_ONLY</entry>
                                    <entry>Отображает, является ли транзакция, транзакцией только
                                        для чтения. FALSE для R/W транзакций TRUE для ReadOnly.
                                        Добавлено в версии 2.5.3.</entry>
                                </row>
                                <row>
                                    <entry>SESSION_ID</entry>
                                    <entry>Глобальная переменная CURRENT_CONNECTION.</entry>
                                </row>
                                <row>
                                    <entry>TRANSACTION_ID</entry>
                                    <entry>Глобальная переменная CURRENT_TRANSACTION.</entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </table>
                </para>
                <note>
                    <para>Ещё раз обратите внимание на то, что пространства имён и имена переменных
                        регистрочувствительны, должны быть непустыми строками, и заключены в
                        кавычки!</para>
                </note>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции RDB$GET_CONTEXT</title>
                    <para><programlisting language="sql">
NEW.USER_ADR = RDB$GET_CONTEXT ('SYSTEM', 'CLIENT_ADDRESS');                  
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-context-setcontext">RDB$SET_CONTEXT</link>.
                    </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-context-setcontext">
                <info>
                    <title>RDB$SET_CONTEXT</title>
                </info>
                <indexterm><primary>RDB$SET_CONTEXT</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
RDB$SET_CONTEXT('<replaceable>&lt;namespace&gt;</replaceable>', '<replaceable>varname</replaceable>', {<replaceable>&lt;value&gt;</replaceable> | NULL})   
                            
<replaceable>&lt;namespace&gt;</replaceable> ::= USER_SESSION | USER_TRANSACTION                            
                </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции RDB$SET_CONTEXT</title>
                        <varlistentry>
                            <term><replaceable>namespace</replaceable></term>
                            <listitem>
                                <para>Пространство имён.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>varname</replaceable></term>
                            <listitem>
                                <para>Имя переменной. Зависит от регистра. Максимальная длина 80
                                    символов.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>value</replaceable></term>
                            <listitem>
                                <para>Данные любого типа при условии, что их можно привести к типу
                                    VARCHAR(255).</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>INTEGER</para>
                </formalpara>

                <para>Функция RDB$SET_CONTEXT создаёт, устанавливает значение или обнуляет
                    переменную в одном из используемых пользователем пространстве имён: USER_SESSION
                    или USER_TRANSACTION. </para>
                <para>Функция возвращает 1, если переменная уже существовала до вызова и 0, если не
                    существовала. Для удаления переменной надо установить её значение в NULL. Если
                    данное пространство имён не существует, то функция вернёт ошибку. Пространство
                    имён и имя переменной зависят от регистра, должны быть не пустыми строками, и
                    заключены в кавычки.</para>
                <note>
                    <para>
                        <itemizedlist spacing="compact">
                            <listitem>
                                <para>Пространство имён SYSTEM доступно только для чтения;</para>
                            </listitem>
                            <listitem>
                                <para>Максимальное число переменных в рамках одного соединения равно
                                    1000;</para>
                            </listitem>
                            <listitem>
                                <para>Все переменные в пространстве имён USER_TRANSACTION
                                    сохраняются при ROLLBACK RETAIN или ROLLBACK TO SAVEPOINT,
                                    независимо от того, в какой точке во время выполнения транзакции
                                    они были установлены.</para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </note>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции RDB$SET_CONTEXT</title>
                    <para><programlisting language="sql">
SELECT RDB$SET_CONTEXT ('USER_SESSION', 'DEBUGL', 3)	
FROM RDB$DATABASE;

-- в PSQL доступен такой синтаксис
RDB$SET_CONTEXT('USER_SESSION', 'RECORDSFOUND', RECCOUNTER);

SELECT RDB$SET_CONTEXT ('USER_TRANSACTION', 'SAVEPOINTS', 'YES')
FROM RDB$DATABASE;               
                </programlisting></para>
                </example>
                <example>
                    <title>Использование функций для работы с контекстными переменными</title>
                    <para><programlisting language="sql">
SET TERM ^;
CREATE PROCEDURE set_context(User_ID VARCHAR(40), 
                             Trn_ID INT) AS
BEGIN
  RDB$SET_CONTEXT('USER_TRANSACTION', 'Trn_ID', Trn_ID);
  RDB$SET_CONTEXT('USER_TRANSACTION', 'User_ID', User_ID);
END^
SET TERM ;^

CREATE TABLE journal (
   jrn_id INTEGER NOT NULL PRIMARY KEY,
   jrn_lastuser VARCHAR(40),
   jrn_lastaddr VARCHAR(255),
   jrn_lasttran INTEGER
);

SET TERM ^;
CREATE TRIGGER UI_JOURNAL 
FOR JOURNAL BEFORE INSERT OR UPDATE
AS 
BEGIN
  new.jrn_lastuser = RDB$GET_CONTEXT('USER_TRANSACTION',
                                     'User_ID');
  new.jrn_lastaddr = RDB$GET_CONTEXT('SYSTEM',
                                     'CLIENT_ADDRESS');
  new.jrn_lasttran = RDB$GET_CONTEXT('USER_TRANSACTION',
                                         'Trn_ID');
END^
SET TERM ;^

EXECUTE PROCEDURE set_context('skidder', 1);

INSERT INTO journal(jrn_id) VALUES(0);

COMMIT;              
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-context-getcontext">RDB$GET_CONTEXT</link>.
                    </para>
                </formalpara>
            </section>
        </section>
        <section xml:id="internalfunc-func-math">
            <info>
                <title>Математические функции</title>
            </info>
            <para/>
            <section xml:id="internalfunc-func-math-abs">
                <info>
                    <title>ABS</title>
                </info>
                <indexterm><primary>ABS</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
ABS (<replaceable>value</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции ABS</title>
                        <varlistentry>
                            <term><replaceable>value</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>тот же что и входной аргумент.</para>
                </formalpara>

                <para>Функция ABS возвращает абсолютное значение (модуль) аргумента. </para>
            </section>
            <section xml:id="internalfunc-func-math-acos">
                <info>
                    <title>ACOS</title>
                </info>
                <indexterm><primary>ACOS</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
ACOS (<replaceable>value</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции ACOS</title>
                        <varlistentry>
                            <term><replaceable>value</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа в диапазоне [-1; 1].</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция ACOS возвращает арккосинус (в радианах) аргумента. </para>
                <para>В случае если аргумент функции вне границы диапазона [-1, 1], то функция
                    вернёт неопределённое значения NaN.</para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-math-cos">COS</link>. </para>
                </formalpara>
            </section>

            <section xml:id="internalfunc-func-math-asin">
                <info>
                    <title>ASIN</title>
                </info>
                <indexterm><primary>ASIN</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
ASIN (<replaceable>value</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции ASIN</title>
                        <varlistentry>
                            <term><replaceable>value</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа в диапазоне [-1; 1].</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция ASIN возвращает арксинус (в радианах) аргумента. </para>
                <para>В случае если аргумент функции вне границы диапазона [-1, 1], то функция
                    вернёт неопределённое значения NaN.</para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-math-sin">SIN</link>. </para>
                </formalpara>
            </section>

            <section xml:id="internalfunc-func-math-atan">
                <info>
                    <title>ATAN</title>
                </info>
                <indexterm><primary>ATAN</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
ATAN (<replaceable>value</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции ATAN</title>
                        <varlistentry>
                            <term><replaceable>value</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция ATAN возвращает арктангенс аргумента. </para>
                <para>Функция возвращает угол в радианах в диапазоне [-&#960;/2; &#960;/2].</para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-math-atan2">ATAN2</link>, <link
                            linkend="internalfunc-func-math-tan">TAN</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-math-atan2">
                <info>
                    <title>ATAN2</title>
                </info>
                <indexterm><primary>ATAN2</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
ATAN2 (<replaceable>y</replaceable>, <replaceable>x</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции ATAN2</title>
                        <varlistentry>
                            <term><replaceable>x</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>y</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция ATAN2 возвращает угол как отношение синуса к косинусу, аргументы, у
                    которых задаются этими двумя параметрами, а знаки синуса и косинуса
                    соответствуют знакам параметров. Это позволяет получать результаты по всей
                    окружности, включая углы -&#960;/2 и &#960;/2. </para>
                <para>Особенности использования: <itemizedlist spacing="compact">
                        <listitem>
                            <para>Результат — угол в диапазоне [-&#960;, &#960;] радиан;</para>
                        </listitem>
                        <listitem>
                            <para>Если <replaceable>х</replaceable> отрицательный, то при нулевом
                                значении y результат равен &#960;, а при значении 0 равен
                                -&#960;;</para>
                        </listitem>
                        <listitem>
                            <para>Если и y и x равны 0, то результат бессмыслен.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <note>
                    <para>
                        <itemizedlist spacing="compact">
                            <listitem>
                                <para>Полностью эквивалентное описание этой функции следующее: ATAN2
                                    (y, x) является углом между положительной осью X и линией от
                                    начала координат до точки (x, y). Это также делает очевидным,
                                    что значение ATAN2 (0, 0) не определено;</para>
                            </listitem>
                            <listitem>
                                <para>Если <replaceable>x</replaceable> больше, чем 0, ATAN2 (y, x)
                                    совпадает с ATAN (y/x);</para>
                            </listitem>
                            <listitem>
                                <para>Если известны и синус, и косинус угла, то ATAN2 (SIN, COS)
                                    возвращает угол.</para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </note>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-math-atan">ATAN</link>, <link
                            linkend="internalfunc-func-math-sin">SIN</link>, <link
                            linkend="internalfunc-func-math-cos">COS</link>. </para>
                </formalpara>
            </section>

            <section xml:id="internalfunc-func-math-ceil">
                <info>
                    <title>CEIL, CEILING</title>
                </info>
                <indexterm><primary>CEIL</primary></indexterm>
                <indexterm><primary>CEILING</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
CEIL[ING] (<replaceable>number</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции CEIL[ING]</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>BIGINT или DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция CEIL возвращает наименьшее целое число, большее или равное
                    аргументу.</para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-math-floor">FLOOR</link>, <link
                            linkend="internalfunc-func-math-trunc">TRUNC</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-math-cos">
                <info>
                    <title>COS</title>
                </info>
                <indexterm><primary>COS</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
COS (<replaceable>angle</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции COS</title>
                        <varlistentry>
                            <term><replaceable>angle</replaceable></term>
                            <listitem>
                                <para>Угол, выраженный в радианах.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция COS возвращает косинус угла. Аргумент должен быть задан в
                    радианах.</para>
                <para>Любой NOT NULL результат находится в диапазоне [-1, 1].</para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-math-acos">ACOS</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-math-cosh">
                <info>
                    <title>COSH</title>
                </info>
                <indexterm><primary>COSH</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
COSH (<replaceable>number</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции COSH</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция COSH возвращает гиперболический косинус аргумента.</para>
                <para>Любой NOT NULL результат находится в диапазоне [1, +&#8734;].</para>
            </section>
            <section xml:id="internalfunc-func-math-cot">
                <info>
                    <title>COT</title>
                </info>
                <indexterm><primary>COT</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
COT (<replaceable>angle</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции COT</title>
                        <varlistentry>
                            <term><replaceable>angle</replaceable></term>
                            <listitem>
                                <para>Угол, выраженный в радианах.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция COT возвращает котангенс угла. Аргумент должен быть задан в
                    радианах.</para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-math-tan">TAN</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-math-exp">
                <info>
                    <title>EXP</title>
                </info>
                <indexterm><primary>EXP</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
EXP (<replaceable>number</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции EXP</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция EXP возвращает значение натуральной экспоненты, <inlineequation>
                        <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML">
                            <mml:mrow>
                                <mml:msup>
                                    <mml:mi>e</mml:mi>
                                    <mml:mn>number</mml:mn>
                                </mml:msup>
                            </mml:mrow>
                        </mml:math>
                    </inlineequation>.</para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-math-ln">LN</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-math-floor">
                <info>
                    <title>FLOOR</title>
                </info>
                <indexterm><primary>FLOOR</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
FLOOR (<replaceable>number</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции FLOOR</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>BIGINT или DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция FLOOR возвращает целое число, меньшее или равное аргументу.</para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-math-ceil">CEIL, CEILING</link>, <link
                            linkend="internalfunc-func-math-trunc">TRUNC</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-math-ln">
                <info>
                    <title>LN</title>
                </info>
                <indexterm><primary>LN</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
LN (<replaceable>number</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции LN</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция LN возвращает натуральный логарифм аргумента.</para>
                <note>
                    <para>В случае если передан отрицательный или нулевой аргумент функция вернёт
                        ошибку. </para>
                </note>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-math-exp">EXP</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-math-log">
                <info>
                    <title>LOG</title>
                </info>
                <indexterm><primary>LOG</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
LOG (<replaceable>x</replaceable>, <replaceable>y</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции LOG</title>
                        <varlistentry>
                            <term><replaceable>x</replaceable></term>
                            <listitem>
                                <para>Основание. Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>y</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция LOG возвращает логарифм <replaceable>y</replaceable> (второй аргумент)
                    по основанию <replaceable>x</replaceable> (первый аргумент).</para>
                <para>Особенности использования: <itemizedlist spacing="compact">
                        <listitem>
                            <para>Если один из аргументов меньше или равен 0, то возникает
                                ошибка;</para>
                        </listitem>
                        <listitem>
                            <para>Если оба аргумента равны 1, то результатом функции будет NaN
                                (Not-a-Number — не число);</para>
                        </listitem>
                        <listitem>
                            <para>Если <replaceable>x</replaceable> = 1 и
                                    <replaceable>y</replaceable> &lt; 1, то результатом функции
                                будет -INF (-&#8734;);</para>
                        </listitem>
                        <listitem>
                            <para>Если <replaceable>x</replaceable> = 1 и
                                    <replaceable>y</replaceable> &gt; 1, то результатом функции
                                будет +INF (+&#8734;).</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </section>
            <section xml:id="internalfunc-func-math-log10">
                <info>
                    <title>LOG10</title>
                </info>
                <indexterm><primary>LOG10</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
LOG10 (<replaceable>number</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции LOG10</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция LOG10 возвращает десятичный логарифм аргумента.</para>
                <note>
                    <para>Если входной аргумент отрицательный или равен 0, возникает ошибка. </para>
                </note>
            </section>
            <section xml:id="internalfunc-func-math-mod">
                <info>
                    <title>MOD</title>
                </info>
                <indexterm><primary>MOD</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
MOD (<replaceable>a</replaceable>, <replaceable>b</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции MOD</title>
                        <varlistentry>
                            <term><replaceable>a</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>b</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>INTEGER или BIGINT.</para>
                </formalpara>

                <para>Функция MOD возвращает остаток от целочисленного деления. </para>
                <note>
                    <para>Вещественные числа округляются до выполнения деления. Например,
                        результатом 7.5 mod 2.5 будет 2 (8 mod 3), а не 0.</para>
                </note>
            </section>
            <section xml:id="internalfunc-func-math-pi">
                <info>
                    <title>PI</title>
                </info>
                <indexterm><primary>PI</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
PI ()                         
                        </programlisting>
                    </para>
                </formalpara>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция PI возвращает число &#960;. </para>
            </section>
            <section xml:id="internalfunc-func-math-power">
                <info>
                    <title>POWER</title>
                </info>
                <indexterm><primary>POWER</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
POWER (<replaceable>x</replaceable>, <replaceable>y</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции POWER</title>
                        <varlistentry>
                            <term><replaceable>x</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>y</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция POWER возвращает результат возведения числа
                        <replaceable>x</replaceable> в степень <replaceable>y</replaceable>.</para>
                <note>
                    <para>Если <replaceable>x</replaceable> меньше нуля, возникает ошибка.</para>
                </note>
            </section>
            <section xml:id="internalfunc-func-math-rand">
                <info>
                    <title>RAND</title>
                </info>
                <indexterm><primary>RAND</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
RAND ()                         
                        </programlisting>
                    </para>
                </formalpara>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция RAND возвращает псевдослучайное число в интервале от 0 до 1. </para>
            </section>
            <section xml:id="internalfunc-func-math-round">
                <info>
                    <title>ROUND</title>
                </info>
                <indexterm><primary>ROUND</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
ROUND (<replaceable>number</replaceable> [, <replaceable>scale</replaceable>])                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции ROUND</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>scale</replaceable></term>
                            <listitem>
                                <para>Масштаб - целое число, определяющее число десятичных разрядов,
                                    к которым должен быть проведено округление, т.е.
                                    <screen>
2 для округления к самому близкому кратному 0.01 числу
1 для округления к самому близкому кратному 0.1 числу
0 для округления к самому близкому целому числу
-1 для округления к самому близкому кратному 10 числу
-2 для округления к самому близкому кратному 100 числу
                                        </screen>
                                    По умолчанию 0. </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>INTEGER, масштабируемый BIGINT, DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция ROUND округляет число до ближайшего целого числа. Если дробная часть
                    равна 0.5, то округление до ближайшего большего целого числа для положительных
                    чисел и до ближайшего меньшего для отрицательных чисел. С дополнительным
                    опциональным параметром <replaceable>scale</replaceable> число может быть
                    округлено до одной из степеней числа 10 (десятки, сотни, десятые части, сотые
                    части и т.д.) вместо просто целого числа. </para>
                <note>
                    <para>Если используется параметр <replaceable>scale</replaceable>, то результат
                        имеет такой же масштаб, как и первый параметр
                            <replaceable>number</replaceable>. </para>
                </note>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции ROUND</title>
                    <para><programlisting language="sql">
ROUND(123.654, 1) -- Результат: 123.700 (а не 123.7)
ROUND(8341.7, -3) -- Результат: 8000.0 (а не 8000)
ROUND(45.1212, 0) -- Результат: 45.0000 (а не 45)
ROUND(45.1212)    -- Результат: 45           
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-math-trunc">TRUNC</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-math-sign">
                <info>
                    <title>SIGN</title>
                </info>
                <indexterm><primary>SIGN</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
SIGN (<replaceable>number</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции SIGN</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>SMALLINT.</para>
                </formalpara>

                <para>Функция SIGN возвращает знак входного параметра. </para>
                <para>
                    <table frame="all">
                        <title>Таблица результатов функции SIGN</title>
                        <tgroup cols="2">
                            <colspec colname="c1" colnum="1" colwidth="1.0*" align="left"/>
                            <colspec colname="c2" colnum="2" colwidth="2.0*" align="justify"/>
                            <thead>
                                <row>
                                    <entry align="center"> Результат </entry>
                                    <entry align="center"> Значение </entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                    <entry> -1 </entry>
                                    <entry> число меньше нуля </entry>
                                </row>
                                <row>
                                    <entry> 0 </entry>
                                    <entry> число равно нулю </entry>
                                </row>
                                <row>
                                    <entry> 1 </entry>
                                    <entry> число больше нуля </entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </table>
                </para>
            </section>
            <section xml:id="internalfunc-func-math-sin">
                <info>
                    <title>SIN</title>
                </info>
                <indexterm><primary>SIN</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
SIN (<replaceable>angle</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции SIN</title>
                        <varlistentry>
                            <term><replaceable>angle</replaceable></term>
                            <listitem>
                                <para>Угол, выраженный в радианах.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция SIN возвращает синус угла. Аргумент должен быть задан в
                    радианах.</para>
                <para>Любой NOT NULL результат находится в диапазоне [-1, 1].</para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-math-asin">ASIN</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-math-sinh">
                <info>
                    <title>SINH</title>
                </info>
                <indexterm><primary>SINH</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
SINH (<replaceable>number</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции SINH</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция SINH возвращает гиперболический синус аргумента.</para>
            </section>
            <section xml:id="internalfunc-func-math-sqrt">
                <info>
                    <title>SQRT</title>
                </info>
                <indexterm><primary>SQRT</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
SQRT (<replaceable>number</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции SQRT</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция SQRT возвращает квадратный корень аргумента.</para>
            </section>
            <section xml:id="internalfunc-func-math-tan">
                <info>
                    <title>TAN</title>
                </info>
                <indexterm><primary>TAN</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
TAN (<replaceable>angle</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции TAN</title>
                        <varlistentry>
                            <term><replaceable>angle</replaceable></term>
                            <listitem>
                                <para>Угол, выраженный в радианах.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция TAN возвращает тангенс угла. Аргумент должен быть задан в
                    радианах.</para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-math-atan">ATAN</link>, <link
                            linkend="internalfunc-func-math-atan2">ATAN2</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-math-tanh">
                <info>
                    <title>TANH</title>
                </info>
                <indexterm><primary>TANH</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
TANH (<replaceable>number</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции TANH</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция TANH возвращает гиперболический тангенс аргумента.</para>
                <para>Любой NOT NULL результат находится в диапазоне [-1, 1].</para>
            </section>
            <section xml:id="internalfunc-func-math-trunc">
                <info>
                    <title>TRUNC</title>
                </info>
                <indexterm><primary>TRUNC</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
TRUNC (<replaceable>number</replaceable> [, <replaceable>scale</replaceable>])                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции TRUNC</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Выражение числового типа.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>scale</replaceable></term>
                            <listitem>
                                <para>Масштаб - целое число, определяющее число десятичных разрядов,
                                    к которым должен быть проведено усечение, т.е.
                                    <screen>
2 для усечения к самому близкому кратному 0.01 числу
1 для усечения к самому близкому кратному 0.1 числу
0 для усечения к самому близкому целому числу
-1 для усечения к самому близкому кратному 10 числу
-2 для усечения к самому близкому кратному 100 числу
                                        </screen>
                                    По умолчанию 0.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>INTEGER, масштабируемый BIGINT, DOUBLE PRECISION.</para>
                </formalpara>

                <para>Функция TRUNC усекает число до ближайшего целого числа. С дополнительным
                    опциональным параметром <replaceable>scale</replaceable> число может быть
                    усечено до одной из степеней числа 10 (десятки, сотни, десятые части, сотые
                    части и т.д.) вместо просто целого числа. </para>
                <note>
                    <para>Если используется параметр <replaceable>scale</replaceable>, то результат
                        имеет такой же масштаб, как и первый параметр
                            <replaceable>number</replaceable>. </para>
                </note>
                <important>
                    <para>Функция всегда увеличивает отрицательные числа, поскольку она обрезает
                        дробную часть. </para>
                </important>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции TRUNC</title>
                    <para><programlisting language="sql">
TRUNC(789.2225, 2)  -- Результат: 789.2200 (а не 789.22)
TRUNC(345.4, -2) 	-- Результат: 300.0 (а не 300)
TRUNC(-163.41, 0)	-- Результат: -163.00 (а не -163)
TRUNC(-163.41)      -- Результат: -163        
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-math-round">ROUND</link>, <link
                            linkend="internalfunc-func-math-ceil">CEIL, CEILING</link>, <link
                            linkend="internalfunc-func-math-floor">FLOOR</link>. </para>
                </formalpara>
            </section>
        </section>
        <section xml:id="internalfunc-func-string">
            <info>
                <title>Функции для работы со строками</title>
            </info>
            <para/>
            <section xml:id="internalfunc-func-string-ascii_char">
                <info>
                    <title>ASCII_CHAR</title>
                </info>
                <indexterm><primary>ASCII_CHAR</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
ASCII_CHAR (<replaceable>code</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции ASCII_CHAR</title>
                        <varlistentry>
                            <term><replaceable>code</replaceable></term>
                            <listitem>
                                <para>Целое число в диапазоне от 0 до 255.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>[VAR]CHAR(1) CHARSET NONE.</para>
                </formalpara>

                <para>Функция ASCII_CHAR возвращает ASCII символ соответствующий номеру, переданному
                    в качестве аргумента.</para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-ascii_val">ASCII_VAL</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-string-ascii_val">
                <info>
                    <title>ASCII_VAL</title>
                </info>
                <indexterm><primary>ASCII_VAL</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
ASCII_VAL (<replaceable>ch</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции ASCII_VAL</title>
                        <varlistentry>
                            <term><replaceable>ch</replaceable></term>
                            <listitem>
                                <para>Строка типа данных [VAR]CHAR или текстовый BLOB максимального
                                    размера 32767 байт.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>SMALLINT.</para>
                </formalpara>

                <para>Функция ASCII_VAL возвращает ASCII код символа, переданного в качестве
                    аргумента.</para>
                <para>Особенности использования: <itemizedlist spacing="compact">
                        <listitem>
                            <para>Если строка содержит более одного символа, то возвращается код
                                первого символа строки;</para>
                        </listitem>
                        <listitem>
                            <para>Если строка пустая, возвращается ноль;</para>
                        </listitem>
                        <listitem>
                            <para>Если аргумент NULL, то возвращаемое значение также NULL.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-ascii_char">ASCII_CHAR</link>.
                    </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-string-bit_length">
                <info>
                    <title>BIT_LENGTH</title>
                </info>
                <indexterm><primary>BIT_LENGTH</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
BIT_LENGTH (<replaceable>str</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции BIT_LENGTH</title>
                        <varlistentry>
                            <term><replaceable>str</replaceable></term>
                            <listitem>
                                <para>Выражение строкового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>INTEGER.</para>
                </formalpara>

                <para>Функция BIT_LENGTH возвращает длину входной строки в битах. Для многобайтных
                    наборов символов результат может быть в 8 раз больше, чем количество символов в
                    &quot;формальном&quot; числе байт на символ, записанном в
                    RDB$CHARACTER_SETS.</para>
                <para>С параметрами типа CHAR эта функция берет во внимание всю формальную строковую
                    длину (например, объявленная длина поля или переменной). Если вы хотите получить
                    &quot;логическую&quot; длину в битах, не считая пробелов, то перед передачей
                    аргумента в BIT_LENGTH надо выполнить над ним операцию RIGHT TRIM. </para>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции BIT_LENGTH</title>
                    <para><programlisting language="sql">
SELECT BIT_LENGTH ('Hello!') FROM RDB$DATABASE
-- возвращает 48

SELECT BIT_LENGTH (_ISO8859_1 'Grüß Di!')
FROM RDB$DATABASE
-- возвращает 64: каждый, и ü, и ß занимают один байт в ISO8859_1

SELECT BIT_LENGTH (
CAST (_ISO8859_1 'Grüß di!' AS VARCHAR (24)
CHARACTER SET UTF8))
FROM RDB$DATABASE
-- возвращает 80: каждый, и ü, и ß занимают по два байта в UTF8

SELECT BIT_LENGTH (
CAST (_ISO8859_1 'Grüß di!' AS CHAR (24)
CHARACTER SET UTF8))
FROM RDB$DATABASE
-- возвращает 208: размер всех 24 позиций CHAR и два из них 16-битные
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-char_length">CHAR_LENGTH</link>,
                            <link linkend="internalfunc-func-string-octet_length"
                            >OCTET_LENGTH</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-string-char_length">
                <info>
                    <title>CHAR_LENGTH, CHARACTER_LENGTH</title>
                </info>
                <indexterm><primary>CHAR_LENGTH</primary></indexterm>
                <indexterm><primary>CHARACTER_LENGTH</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
CHAR_LENGTH (<replaceable>str</replaceable>)    
                            
CHARACTER_LENGTH (<replaceable>str</replaceable>)                              
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции CHAR_LENGTH</title>
                        <varlistentry>
                            <term><replaceable>str</replaceable></term>
                            <listitem>
                                <para>Выражение строкового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>INTEGER.</para>
                </formalpara>

                <para>Функция CHAR_LENGTH возвращает длину (в символах) строки, переданной в
                    качестве аргумента.</para>
                <note>
                    <para>С параметрами типа CHAR эта функция берет во внимание всю формальную
                        строковую длину (например, объявленная длина поля или переменной). Если вы
                        хотите получить &quot;логическую&quot; длину без учёта пробелов, то перед
                        передачей аргумента в CHAR[ACTER]_LENGTH надо выполнить над ним операцию
                        RIGHT TRIM.</para>
                </note>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-bit_length">BIT_LENGTH</link>, <link
                            linkend="internalfunc-func-string-octet_length">OCTET_LENGTH</link>.
                    </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-string-hash">
                <info>
                    <title>HASH</title>
                </info>
                <indexterm><primary>HASH</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
HASH (<replaceable>str</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции HASH</title>
                        <varlistentry>
                            <term><replaceable>str</replaceable></term>
                            <listitem>
                                <para>Выражение строкового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>BIGINT.</para>
                </formalpara>

                <para>Функция HASH возвращает хэш-значение входной строки. Эта функция полностью
                    поддерживает текстовые BLOB любой длины и с любым набором символов. </para>
            </section>
            <section xml:id="internalfunc-func-string-left">
                <info>
                    <title>LEFT</title>
                </info>
                <indexterm><primary>LEFT</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
LEFT (<replaceable>str</replaceable>, <replaceable>num</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции LEFT</title>
                        <varlistentry>
                            <term><replaceable>str</replaceable></term>
                            <listitem>
                                <para>Выражение строкового типа.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>num</replaceable></term>
                            <listitem>
                                <para>Целое число. Определяет количество возвращаемых
                                    символов.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>VARCHAR(N) или BLOB.</para>
                </formalpara>

                <para>Функция LEFT возвращает левую часть строки, количество возвращаемых символов
                    определяется вторым параметром. </para>
                <para>Особенности использования: <itemizedlist spacing="compact">
                        <listitem>
                            <para>Функция поддерживает текстовые блоки любой длины и с любыми
                                наборами символов;</para>
                        </listitem>
                        <listitem>
                            <para>Если строковый аргумент BLOB, результатом будет BLOB, в противном
                                случае результатом будет VARCHAR(N), при этом N – будет равно длине
                                строкового параметра;</para>
                        </listitem>
                        <listitem>
                            <para>Если числовой параметр превысит длину текста, результатом будет
                                исходный текст.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <warning>
                    <para>При использовании BLOB в параметрах функции может потребоваться загрузить
                        объект полностью в память. При больших объёмах BLOB могут наблюдаться потери
                        производительности. </para>
                </warning>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции LEFT</title>
                    <para><programlisting language="sql">
SELECT LEFT('ABC', 2) FROM rdb$database;
-- результат AB
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-right">RIGHT</link>, <link
                            linkend="internalfunc-func-string-substring">SUBSTRING</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-string-lower">
                <info>
                    <title>LOWER</title>
                </info>
                <indexterm><primary>LOWER</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL, ESQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
LOWER (<replaceable>str</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции LOWER</title>
                        <varlistentry>
                            <term><replaceable>str</replaceable></term>
                            <listitem>
                                <para>Выражение строкового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>VARCHAR(N) или BLOB.</para>
                </formalpara>

                <para>Функция LOWER возвращает входную строку в нижнем регистре. Точный результат
                    зависит от набора символов входной строки. Например, для наборов символов NONE и
                    ASCII только ASCII символы переводятся в нижний регистр; для OCTETS – вся
                    входная строка возвращается без изменений. </para>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции LOWER</title>
                    <para><programlisting language="sql">
/* Результат: 'debacle', в соответствии с французскими 
 * правилами приведения в нижний регистр 
 */                        
SELECT LOWER(_ISO8859_1 'Débâcle' COLLATE FR_FR)
FROM RDB$DATABASE
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-upper">UPPER</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-string-lpad">
                <info>
                    <title>LPAD</title>
                </info>
                <indexterm><primary>LPAD</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
LPAD (<replaceable>str</replaceable>, <replaceable>endlen</replaceable> [, <replaceable>padstr</replaceable>])                                                     
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции LPAD</title>
                        <varlistentry>
                            <term><replaceable>str</replaceable></term>
                            <listitem>
                                <para>Выражение строкового типа.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>endlen</replaceable></term>
                            <listitem>
                                <para>Длина выходной строки.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>padstr</replaceable></term>
                            <listitem>
                                <para>Строка, которой дополняется исходная строка до указанной
                                    длины. По умолчанию является пробелом (' ').</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>VARCHAR(<replaceable>endlen</replaceable>) или BLOB.</para>
                </formalpara>

                <para>Функция LPAD дополняет слева входную строку пробелами или определённой
                    пользователем строкой до заданной длины. </para>
                <para>Особенности использования: <itemizedlist spacing="compact">
                        <listitem>
                            <para>Функция поддерживает текстовые блоки любой длины и с любыми
                                наборами символов;</para>
                        </listitem>
                        <listitem>
                            <para>Если входная строка имеет тип BLOB, то результат также будет BLOB,
                                в противном случае результат будет
                                    VARCHAR(<replaceable>endlen</replaceable>).</para>
                        </listitem>
                        <listitem>
                            <para>Если аргумент <replaceable>padstr</replaceable> задан, но равен
                                пустой строке (''), то дополнения строки не происходит! В случае
                                если <replaceable>endlen</replaceable> меньше длины входной строки,
                                то в результате происходит её усечение до длины
                                    <replaceable>endlen</replaceable>, даже если параметр
                                    <replaceable>padstr</replaceable> равен пустой строке.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <warning>
                    <para>При использовании BLOB в параметрах функции может потребоваться загрузить
                        объект полностью в память. При больших объёмах BLOB могут наблюдаться потери
                        производительности. </para>
                </warning>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции LPAD</title>
                    <para><programlisting language="sql">
LPAD ('Hello', 12)                -- возвращает '       Hello'
LPAD ('Hello', 12, '-')           -- возвращает '-------Hello'
LPAD ('Hello', 12, '')            -- возвращает 'Hello'
LPAD ('Hello', 12, 'abc')         -- возвращает 'abcabcaHello'
LPAD ('Hello', 12, 'abcdefghij')  -- возвращает 'abcdefgHello'
LPAD ('Hello', 2)                 -- возвращает 'He'
LPAD ('Hello', 2, '-')            -- возвращает 'He'
LPAD ('Hello', 2, '')             -- возвращает 'He'
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-rpad">RPAD</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-string-octet_length">
                <info>
                    <title>OCTET_LENGTH</title>
                </info>
                <indexterm><primary>OCTET_LENGTH</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
OCTET_LENGTH (<replaceable>str</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции OCTET_LENGTH</title>
                        <varlistentry>
                            <term><replaceable>str</replaceable></term>
                            <listitem>
                                <para>Выражение строкового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>INTEGER.</para>
                </formalpara>

                <para>Функция OCTET_LENGTH возвращает количество байт занимаемое строкой.</para>
                <para>При работе с параметрами типа CHAR функция возвращает значение всей формальной
                    строковой длины. Для того чтобы узнать &quot;логическую&quot; длину строки в
                    байтах, то перед передачей аргумента функции следует применить RIGHT
                    TRIM.</para>
                <note>
                    <para>Следует помнить, что не во всех наборах символов количество байт
                        занимаемых строкой равно количеству символов.</para>
                </note>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции OCTET_LENGTH</title>
                    <para><programlisting language="sql">
SELECT OCTET_LENGTH('Hello!') 
FROM rdb$database
-- возвратит 6

SELECT OCTET_LENGTH(_iso8859_1 'Grüß di!') 
FROM rdb$database
-- возвратит 8: ü и ß занимают не более 1 байта в ISO8859_1

SELECT 
  OCTET_LENGTH(CAST(_iso8859_1 'Grüß di!' AS VARCHAR(24) CHARACTER SET utf8))
FROM rdb$database
-- возвратит 10: ü и ß занимают 2 байта в UTF8

SELECT 
  OCTET_LENGTH(CAST(_iso8859_1 'Grüß di!' AS CHAR(24) CHARACTER SET utf8))
FROM rdb$database
-- возвратит 26: всего 24 CHAR позиции, и две из них занимают 2 байта
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-bit_length">BIT_LENGTH</link>, <link
                            linkend="internalfunc-func-string-char_length">CHAR_LENGTH</link>.
                    </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-string-overlay">
                <info>
                    <title>OVERLAY</title>
                </info>
                <indexterm><primary>OVERLAY</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
OVERLAY (<replaceable>string</replaceable> PLACING <replaceable>replacement</replaceable> FROM <replaceable>pos</replaceable> [FOR <replaceable>length</replaceable>])                     
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции OVERLAY</title>
                        <varlistentry>
                            <term><replaceable>string</replaceable></term>
                            <listitem>
                                <para>Строка, в которой происходит замена.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>replacement</replaceable></term>
                            <listitem>
                                <para>Строка, которой заменяется.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>pos</replaceable></term>
                            <listitem>
                                <para>Позиция, с которой происходит замена. </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>length</replaceable></term>
                            <listitem>
                                <para>Количество символов, которые будут удалены из исходной строки.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>VARCHAR(N) или BLOB.</para>
                </formalpara>

                <para>Функция OVERLAY предназначена для замены части строки другой строкой. </para>
                <para>По умолчанию число удаляемых из строки символов равняется длине заменяемой
                    строки. Дополнительный четвёртый параметр позволяет пользователю задать своё
                    число символов, которые будут удалены.</para>
                <para>Особенности использования: <itemizedlist spacing="compact">
                        <listitem>
                            <para>Функция полностью поддерживает тестовые BLOB с любым набором
                                символов и любой длины;</para>
                        </listitem>
                        <listitem>
                            <para>Если входная строка имеет тип BLOB, то и результат будет иметь тип
                                BLOB. В противном случае тип результата будет VARCHAR(n), где n
                                является суммой длин параметров <replaceable>string</replaceable> и
                                    <replaceable>replacement</replaceable>;</para>
                        </listitem>
                        <listitem>
                            <para>Как и во всех строковых функциях SQL параметр
                                    <replaceable>pos</replaceable> является определяющим;</para>
                        </listitem>
                        <listitem>
                            <para>Если <replaceable>pos</replaceable> больше длины строки, то
                                    <replaceable>replacement</replaceable> помещается сразу после
                                окончания строки;</para>
                        </listitem>
                        <listitem>
                            <para>Если число символов от <replaceable>pos</replaceable> до конца
                                строки меньше, чем длина <replaceable>replacement</replaceable>
                                (или, чем параметр <replaceable>length</replaceable>, если он
                                задан), то строка усекается до значения pos и
                                    <replaceable>replacement</replaceable> помещается после
                                него;</para>
                        </listitem>
                        <listitem>
                            <para>При нулевом параметре <replaceable>length</replaceable> (FOR 0)
                                    <replaceable>replacement</replaceable> просто вставляется в
                                строку, начиная с позиции <replaceable>pos</replaceable>;</para>
                        </listitem>
                        <listitem>
                            <para>Если любой из параметров имеет значение NULL, то и результат будет
                                NULL;</para>
                        </listitem>
                        <listitem>
                            <para>Если параметры <replaceable>pos</replaceable> и
                                    <replaceable>length</replaceable> не являются целым числом, то
                                используется банковское округление (до чётного): 0.5 становится 0,
                                1.5 становится 2, 2.5 становится 2, 3.5 становится 4 и т.д.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <warning>
                    <para>При использовании BLOB функции может потребоваться загрузить весь объект в
                        память. При больших размерах BLOB это может повлиять на производительность.
                    </para>
                </warning>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции OVERLAY</title>
                    <para><programlisting language="sql">
OVERLAY ('Goodbye' PLACING 'Hello' FROM 2) -- Результат: 'Ghelloe'
OVERLAY ('Goodbye' PLACING 'Hello' FROM 5) -- Результат: 'GoodHello'
OVERLAY ('Goodbye' PLACING 'Hello' FROM 8) -- Результат: 'GoodbyeHello'
OVERLAY ('Goodbye' PLACING 'Hello' FROM 20) -- Результат: 'GoodbyeHello'
OVERLAY ('Goodbye' PLACING 'Hello' FROM 2 FOR 0) -– Результат: 'GHellooodbye'
OVERLAY ('Goodbye' PLACING 'Hello' FROM 2 FOR 3) -- Результат: 'GHellobye'
OVERLAY ('Goodbye' PLACING 'Hello' FROM 2 FOR 6) -- Результат: 'GHello'	
OVERLAY ('Goodbye' PLACING 'Hello' FROM 2 FOR 9) -- Результат: 'Ghello'
OVERLAY ('Goodbye' PLACING '' FROM 4) -- Результат: 'Goodbye'
OVERLAY ('Goodbye' PLACING '' FROM 4 FOR 3) -- Результат: 'Gooe'
OVERLAY ('Goodbye' PLACING '' FROM 4 FOR 20) -- Результат: 'Goo'
OVERLAY ('' PLACING 'Hello' FROM 4) -- Результат: 'Hello'
OVERLAY ('' PLACING 'Hello' FROM 4 FOR 0) -- Результат: 'Hello'
OVERLAY ('' PLACING 'Hello' FROM 4 FOR 20) -- Результат: 'Hello'
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-substring">SUBSTRING</link>, <link
                            linkend="internalfunc-func-string-replace">REPLACE</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-string-position">
                <info>
                    <title>POSITION</title>
                </info>
                <indexterm><primary>POSITION</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
POSITION (<replaceable>&lt;args&gt;</replaceable>)

<replaceable>&lt;args&gt;</replaceable> ::= 
    <replaceable>substr</replaceable> IN <replaceable>string</replaceable>
  | <replaceable>substr</replaceable>, <replaceable>string</replaceable> [, <replaceable>startpos</replaceable>]                     
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции POSITION</title>
                        <varlistentry>
                            <term><replaceable>substr</replaceable></term>
                            <listitem>
                                <para>Подстрока, позиция которой ищется.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>string</replaceable></term>
                            <listitem>
                                <para>Строка, в которой ищется позиция.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>startpos</replaceable></term>
                            <listitem>
                                <para>Позиция, с которой начинается поиск подстроки.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>INTEGER.</para>
                </formalpara>

                <para>Функция POSITION возвращает позицию первого вхождения подстроки в строку.
                    Отсчёт начинается с 1. Третий аргумент (опциональный) задаёт позицию в строке, с
                    которой начинается поиск подстроки, тем самым игнорирую любые вхождения
                    подстроки в строку до этой позиции. Если совпадение не найдено, функция
                    возвращает 0. </para>
                <para>Особенности использования: <itemizedlist spacing="compact">
                        <listitem>
                            <para>Опциональный третий параметр поддерживается только вторым
                                вариантом синтаксиса (синтаксис с запятой);</para>
                        </listitem>
                        <listitem>
                            <para>Пустую строку, функция считает подстрокой любой строки. Поэтому
                                при входном параметре <replaceable>substr</replaceable>, равном ''
                                (пустая строка), и при параметре <replaceable>string</replaceable>,
                                отличном от NULL, результатом будет:<itemizedlist>
                                    <listitem>
                                        <para>1, если параметр <replaceable>startpos</replaceable>
                                            не задан;</para>
                                    </listitem>
                                    <listitem>
                                        <para>1, если параметр <replaceable>startpos</replaceable>
                                            не задан;</para>
                                    </listitem>
                                    <listitem>
                                        <para><replaceable>startpos</replaceable>, если
                                                <replaceable>startpos</replaceable> не превышает
                                            длину параметра
                                            <replaceable>string</replaceable>.</para>
                                    </listitem>
                                </itemizedlist></para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции POSITION</title>
                    <para><programlisting language="sql">
POSITION ('be' IN 'To be or not to be')   -- Результат: 4
POSITION ('be', 'To be or not to be')     -- Результат: 4
POSITION ('be', 'To be or not to be', 4)  -- Результат: 4
POSITION ('be', 'To be or not to be', 8)  -- Результат: 17
POSITION ('be', 'To be or not to be', 18) -- Результат: 0
POSITION ('be' in 'Alas, poor Yorick!') -- Результат: 0
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-substring">SUBSTRING</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-string-replace">
                <info>
                    <title>REPLACE</title>
                </info>
                <indexterm><primary>REPLACE</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
REPLACE (<replaceable>str</replaceable>, <replaceable>find</replaceable>, <replaceable>repl</replaceable>)                     
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции REPLACE</title>
                        <varlistentry>
                            <term><replaceable>str</replaceable></term>
                            <listitem>
                                <para>Строка, в которой делается замена.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>find</replaceable></term>
                            <listitem>
                                <para>Строка, которая ищется.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>repl</replaceable></term>
                            <listitem>
                                <para>Строка, на которую происходит замена.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>VARCHAR(N) или BLOB.</para>
                </formalpara>

                <para>Функция REPLACE заменяет в строке все вхождения одной строки на другую строку. </para>
                <para>Особенности использования: <itemizedlist spacing="compact">
                        <listitem>
                            <para>Функция поддерживает текстовые блоки любой длины и с любыми
                                наборами символов;</para>
                        </listitem>
                        <listitem>
                            <para>Если один из аргументов имеет тип BLOB, то результат будет иметь
                                тип BLOB. В противном случае результат будет иметь тип VARCHAR(N),
                                где N рассчитывается из длин <replaceable>str</replaceable>,
                                    <replaceable>find</replaceable> и
                                    <replaceable>repl</replaceable> таким образом, что даже
                                максимальное количество замен не будет вызывать переполнения
                                поля.</para>
                        </listitem>
                        <listitem>
                            <para>Если параметр <replaceable>find</replaceable> является пустой
                                строкой, то возвращается <replaceable>str</replaceable> без
                                изменений;</para>
                        </listitem>
                        <listitem>
                            <para>Если параметр <replaceable>repl</replaceable> является пустой
                                строкой, то все вхождения <replaceable>find</replaceable> удаляются
                                из строки <replaceable>str</replaceable>;</para>
                        </listitem>
                        <listitem>
                            <para>Если любой из аргументов равен NULL, то результатом всегда будет
                                NULL, даже если не было произведено ни одной замены.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <warning>
                    <para>При использовании BLOB в параметрах функции может потребоваться загрузить
                        объект полностью в память. При больших объёмах BLOB могут наблюдаться потери
                        производительности. </para>
                </warning>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции REPLACE</title>
                    <para><programlisting language="sql">
REPLACE ('Billy Wilder', 'il', 'oog')  -- возвращает 'Boogly Woogder'
REPLACE ('Billy Wilder', 'il', '')     -- возвращает 'Bly Wder'
REPLACE ('Billy Wilder', null, 'oog')  -- возвращает NULL
REPLACE ('Billy Wilder', 'il', null)   -- возвращает NULL
REPLACE ('Billy Wilder', 'xyz', null)  -- возвращает NULL (!)
REPLACE ('Billy Wilder', 'xyz', 'abc') -- возвращает 'Billy Wilder'
REPLACE ('Billy Wilder', '', 'abc')    -- возвращает 'Billy Wilder'
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-overlay">OVERLAY</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-string-reverse">
                <info>
                    <title>REVERSE</title>
                </info>
                <indexterm><primary>REVERSE</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
REVERSE (<replaceable>str</replaceable>)                     
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции REVERSE</title>
                        <varlistentry>
                            <term><replaceable>str</replaceable></term>
                            <listitem>
                                <para>Выражение строкового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>VARCHAR(N).</para>
                </formalpara>

                <para>Функция REVERSE возвратит строку перевёрнутую &quot;задом наперёд&quot;. </para>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции REVERSE</title>
                    <para><programlisting language="sql">
REVERSE ('spoonful')             -- возвращает 'lufnoops'
REVERSE ('Was it a cat I saw?')  -- возвращает '?was I tac a ti saW'
                </programlisting></para>
                </example>
                <tip>
                    <para>Данная функция очень удобна, если вам предстоит работать (сортировать или
                        группировать информацию) которая находится в окончаниях строк. Пример такой
                        информации – доменные имена или имена адресов электронной почты.
                        <programlisting language="sql">
CREATE INDEX ix_people_email ON people
COMPUTED BY (reverse(email));

SELECT * FROM people
WHERE REVERSE(email) STARTING WITH reverse('.br');
                </programlisting>
                    </para>
                </tip>
            </section>
            <section xml:id="internalfunc-func-string-right">
                <info>
                    <title>RIGHT</title>
                </info>
                <indexterm><primary>RIGHT</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
RIGHT (<replaceable>str</replaceable>, <replaceable>num</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции RIGHT</title>
                        <varlistentry>
                            <term><replaceable>str</replaceable></term>
                            <listitem>
                                <para>Выражение строкового типа.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>num</replaceable></term>
                            <listitem>
                                <para>Целое число. Определяет количество возвращаемых
                                    символов.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>VARCHAR(N) или BLOB.</para>
                </formalpara>

                <para>Функция RIGHT возвращает конечную (правую) часть входной строки. Длина
                    возвращаемой подстроки определяется вторым параметром. </para>
                <para>Особенности использования: <itemizedlist spacing="compact">
                        <listitem>
                            <para>Функция поддерживает текстовые блоки любой длины и с любыми
                                наборами символов;</para>
                        </listitem>
                        <listitem>
                            <para>Если строковый аргумент BLOB, результатом будет BLOB, в противном
                                случае результатом будет VARCHAR(N), при этом N – будет равно длине
                                строкового параметра;</para>
                        </listitem>
                        <listitem>
                            <para>Если числовой параметр превысит длину текста, результатом будет
                                исходный текст.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <warning>
                    <para>При использовании BLOB в параметрах функции может потребоваться загрузить
                        объект полностью в память. При больших объёмах BLOB могут наблюдаться потери
                        производительности. </para>
                </warning>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции RIGHT</title>
                    <para><programlisting language="sql">
SELECT RIGHT('ABC', 1) FROM rdb$database;
-- результат C
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-left">LEFT</link>, <link
                            linkend="internalfunc-func-string-substring">SUBSTRING</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-string-rpad">
                <info>
                    <title>RPAD</title>
                </info>
                <indexterm><primary>RPAD</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
RPAD (<replaceable>str</replaceable>, <replaceable>endlen</replaceable> [, <replaceable>padstr</replaceable>])                                                     
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции RPAD</title>
                        <varlistentry>
                            <term><replaceable>str</replaceable></term>
                            <listitem>
                                <para>Выражение строкового типа.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>endlen</replaceable></term>
                            <listitem>
                                <para>Длина выходной строки.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>padstr</replaceable></term>
                            <listitem>
                                <para>Строка, которой дополняется исходная строка до указанной
                                    длины. По умолчанию является пробелом (' ').</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>VARCHAR(<replaceable>endlen</replaceable>) или BLOB.</para>
                </formalpara>

                <para>Функция RPAD дополняет справа входную строку пробелами или определённой
                    пользователем строкой до заданной длины. </para>
                <para>Особенности использования: <itemizedlist spacing="compact">
                        <listitem>
                            <para>Функция поддерживает текстовые блоки любой длины и с любыми
                                наборами символов;</para>
                        </listitem>
                        <listitem>
                            <para>Если входная строка имеет тип BLOB, то результат также будет BLOB,
                                в противном случае результат будет
                                    VARCHAR(<replaceable>endlen</replaceable>).</para>
                        </listitem>
                        <listitem>
                            <para>Если аргумент <replaceable>padstr</replaceable> задан, но равен
                                пустой строке (''), то дополнения строки не происходит! В случае
                                если <replaceable>endlen</replaceable> меньше длины входной строки,
                                то в результате происходит её усечение до длины
                                    <replaceable>endlen</replaceable>, даже если параметр
                                    <replaceable>padstr</replaceable> равен пустой строке.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <warning>
                    <para>При использовании BLOB в параметрах функции может потребоваться загрузить
                        объект полностью в память. При больших объёмах BLOB могут наблюдаться потери
                        производительности. </para>
                </warning>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции RPAD</title>
                    <para><programlisting language="sql">
RPAD ('Hello', 12)                -- возвращает 'Hello       '
RPAD ('Hello', 12, '-')           -- возвращает 'Hello-------'
RPAD ('Hello', 12, '')            -- возвращает 'Hello'
RPAD ('Hello', 12, 'abc')         -- возвращает 'Helloabcabca'
RPAD ('Hello', 12, 'abcdefghij')  -- возвращает 'Helloabcdefg'
RPAD ('Hello', 2)                 -- возвращает 'He'
RPAD ('Hello', 2, '-')            -- возвращает 'He'
RPAD ('Hello', 2, '')             -- возвращает 'He'
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-lpad">LPAD</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-string-substring">
                <info>
                    <title>SUBSTRING</title>
                </info>
                <indexterm><primary>SUBSTRING</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
SUBSTRING (<replaceable>str</replaceable> FROM <replaceable>startpos</replaceable> [FOR <replaceable>length</replaceable>])                                                                                
                                                                         </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции SUBSTRING</title>
                        <varlistentry>
                            <term><replaceable>str</replaceable></term>
                            <listitem>
                                <para>Выражение строкового типа.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>startpos</replaceable></term>
                            <listitem>
                                <para>Позиция, с которой начинается извлечение подстроки.
                                    Целочисленное выражение.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>length</replaceable></term>
                            <listitem>
                                <para>Длина возвращаемой подстроки. Целочисленное выражение.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>VARCHAR(N) или BLOB.</para>
                </formalpara>

                <para>Функция SUBSTRING возвращает подстроку строки <replaceable>str</replaceable>,
                    начиная с позиции <replaceable>startpos</replaceable> (позиция начинается с 1)
                    до конца строки или указанной длины. Без предложения FOR возвращаются все
                    оставшиеся символы в строке. С предложением FOR возвращается
                        <replaceable>length</replaceable> символов или остаток строки, в зависимости
                    от того что короче.</para>
                <para>Функция полностью поддерживает двоичные и текстовые BLOB любой длины и с любым
                    набором символов. Если параметр <replaceable>str</replaceable> имеет тип BLOB,
                    то и результат будет иметь тип BLOB. Для любых других типов результатом будет
                    тип VARCHAR(n). Для входного параметра <replaceable>str</replaceable>, не
                    являющегося BLOB, длина результата функции всегда будет равна длине строки
                        <replaceable>str</replaceable>, независимо от значений параметров
                        <replaceable>startpos</replaceable> и <replaceable>length</replaceable>. </para>
                <para>Если любой из входных параметров имеет значение NULL, то и результат тоже
                    будет иметь значение NULL.</para>
                <warning>
                    <para>При использовании BLOB в параметрах функции может потребоваться загрузить
                        объект в память полностью. При больших объёмах BLOB могут наблюдаться потери
                        производительности. </para>
                </warning>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции SUBSTRING</title>
                    <para><programlisting language="sql">
SUBSTRING('Привет!' FROM 4 FOR 3)  -- вернёт подстроку 'вет'
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-position">POSITION</link>, <link
                            linkend="internalfunc-func-string-left">LEFT</link>, <link
                            linkend="internalfunc-func-string-right">RIGHT</link>, <link
                            linkend="internalfunc-func-string-char_length">CHAR_LENGTH</link>.
                    </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-string-trim">
                <info>
                    <title>TRIM</title>
                </info>
                <indexterm><primary>TRIM</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
TRIM ([<replaceable>&lt;adjust&gt;</replaceable>] <replaceable>str</replaceable>)

<replaceable>&lt;adjust&gt;</replaceable> ::=  {[<replaceable>&lt;where&gt;</replaceable>] [<replaceable>what</replaceable>]} FROM

<replaceable>&lt;where&gt;</replaceable> ::=  BOTH | LEADING | TRAILING                                                                                 
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции TRIM</title>
                        <varlistentry>
                            <term><replaceable>str</replaceable></term>
                            <listitem>
                                <para>Выражение строкового типа.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>where</replaceable></term>
                            <listitem>
                                <para>Из какого места необходимо удалить подстроку. По умолчанию
                                    BOTH.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>what</replaceable></term>
                            <listitem>
                                <para>Подстрока, которую надо удалить (неоднократно, если таких
                                    вхождений несколько) из входной строки
                                        <replaceable>str</replaceable> в её начале и/или конце. По
                                    умолчанию является пробелом (' ').</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>VARCHAR(N) или BLOB.</para>
                </formalpara>

                <para>Функция TRIM удаляет начальные и /или концевые пробелы (или текст согласно
                    настройкам) из входной строки.</para>
                <para>
                    <table frame="all">
                        <title>Спецификация опций функции TRIM</title>
                        <tgroup cols="2">
                            <colspec colname="c1" colnum="1" colwidth="1.0*" align="left"/>
                            <colspec colname="c2" colnum="2" colwidth="2.0*" align="justify"/>
                            <thead>
                                <row>
                                    <entry align="center"> Опция </entry>
                                    <entry align="center"> Описание </entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                    <entry> BOTH </entry>
                                    <entry> с обеих сторон строки (по умолчанию) </entry>
                                </row>
                                <row>
                                    <entry> LEADING </entry>
                                    <entry> с начала строки </entry>
                                </row>
                                <row>
                                    <entry> TRAILING </entry>
                                    <entry> с конца строки </entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </table>
                </para>
                <para>Особенности использования: <itemizedlist spacing="compact">
                        <listitem>
                            <para>Если входной параметр <replaceable>str</replaceable> имеет тип
                                BLOB, то и результат будет иметь тип BLOB. В противном случае
                                результат будет иметь тип VARCHAR(n), где n является длиной
                                параметра <replaceable>str</replaceable>;</para>
                        </listitem>
                        <listitem>
                            <para>Подстрока для удаления, если она, конечно, задана, не должна иметь
                                длину больше, чем 32767 байта. Однако при повторениях подстроки в
                                начале и/или конце входного параметра <replaceable>str</replaceable>
                                общее число удаляемых байтов может быть гораздо больше.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <warning>
                    <para>При использовании BLOB в параметрах функции может потребоваться загрузить
                        объект в память полностью. При больших объёмах BLOB могут наблюдаться потери
                        производительности.</para>
                </warning>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции TRIM</title>
                    <para><programlisting language="sql">
SELECT TRIM (' Waste no space ')
FROM RDB$DATABASE -- Результат: 'Waste no space'

SELECT TRIM (LEADING FROM ' Waste no space ')
FROM RDB$DATABASE -- Результат: 'Waste no space '

SELECT TRIM (LEADING '.' FROM ' Waste no space ')
FROM RDB$DATABASE -- Результат: ' Waste no space '

SELECT TRIM (TRAILING '!' FROM 'Help!!!!')
FROM RDB$DATABASE -- Результат: 'Help'

SELECT TRIM ('la' FROM 'lalala I love you Ella')
FROM RDB$DATABASE -- Результат: ' I love you El'
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-overlay">OVERLAY</link>, <link
                            linkend="internalfunc-func-string-replace">REPLACE</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-string-upper">
                <info>
                    <title>UPPER</title>
                </info>
                <indexterm><primary>UPPER</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL, ESQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
UPPER (<replaceable>str</replaceable>)                         
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции UPPER</title>
                        <varlistentry>
                            <term><replaceable>str</replaceable></term>
                            <listitem>
                                <para>Выражение строкового типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>VARCHAR(N) или BLOB.</para>
                </formalpara>

                <para>Функция UPPER возвращает входную строку в верхнем регистре. Точный результат
                    зависит от набора символов входной строки. Например, для наборов символов NONE и
                    ASCII только ASCII символы переводятся в верхний регистр; для OCTETS — вся
                    входная строка возвращается без изменений. </para>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции UPPER</title>
                    <para><programlisting language="sql">
/* Результат: 'DEBACLE', в соответствии с французскими 
 * правилами приведения в верхний регистр 
 */                        
SELECT UPPER(_ISO8859_1 'Débâcle' COLLATE FR_FR)
FROM RDB$DATABASE
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-string-lower">LOWER</link>. </para>
                </formalpara>
            </section>
        </section>
        <section xml:id="internalfunc-func-datetime">
            <info>
                <title>Функции для работы с датой и временем</title>
            </info>
            <para/>
            <section xml:id="internalfunc-func-datetime-dateadd">
                <info>
                    <title>DATEADD</title>
                </info>
                <indexterm><primary>DATEADD</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
DATEADD (<replaceable>&lt;args&gt;</replaceable>)
                            
<replaceable>&lt;args&gt;</replaceable> ::= <replaceable>amount</replaceable> <replaceable>&lt;unit&gt;</replaceable> TO <replaceable>datetime</replaceable>
         | <replaceable>&lt;unit&gt;</replaceable>, <replaceable>amount</replaceable>, <replaceable>datetime</replaceable> 
                            
<replaceable>&lt;unit&gt;</replaceable> ::= 
    YEAR | MONTH | WEEK | DAY | WEEKDAY | YEARDAY
  | HOUR | MINUTE | SECOND | MILLISECOND                            
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции DATEADD</title>
                        <varlistentry>
                            <term><replaceable>amount</replaceable></term>
                            <listitem>
                                <para>Целое выражение типа SMALLINT или INTEGER (отрицательное
                                    вычитается).</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>unit</replaceable></term>
                            <listitem>
                                <para>Составляющая даты/времени.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>datetime</replaceable></term>
                            <listitem>
                                <para>Выражение типа DATE, TIME или TIMESTAMP.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>определяется третьим аргументом функции. </para>
                </formalpara>

                <para>Функция DATEADD позволяет добавить заданное число лет, месяцев, недель, часов,
                    минут, секунд, миллисекунд к заданному значению даты/времени.</para>
                <note>
                    <para>
                        <itemizedlist spacing="compact">
                            <listitem>
                                <para>С аргументом типа TIMESTAMP и DATE можно использовать любую
                                    составляющую даты/времени
                                        (<replaceable>&lt;unit&gt;</replaceable>);</para>
                            </listitem>
                            <listitem>
                                <para>Для типа данных TIME разрешается использовать только HOUR,
                                    MINUTE, SECOND и MILLISECOND.</para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </note>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции DATEADD</title>
                    <para><programlisting language="sql">
DATEADD (28 DAY TO CURRENT_DATE)
DATEADD (-6 HOUR TO CURRENT_TIME)
DATEADD (MONTH, 9, DATEOFCONCEPTION)
DATEADD (-38 WEEK TO DATEOFBIRTH)
DATEADD (MINUTE, 90, TIME 'NOW')
DATEADD (? YEAR TO DATE '11-SEP-1973')
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-datetime-datediff">DATEDIFF</link>, <link
                            linkend="types-datetime-operation">Операции, использующие значения даты
                            и времени</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-datetime-datediff">
                <info>
                    <title>DATEDIFF</title>
                </info>
                <indexterm><primary>DATEDIFF</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
DATEDIFF (<replaceable>&lt;args&gt;</replaceable>)
                            
<replaceable>&lt;args&gt;</replaceable> ::= <replaceable>&lt;unit&gt;</replaceable> FROM <replaceable>moment_1</replaceable> TO <replaceable>moment_2</replaceable>
         | <replaceable>&lt;unit&gt;</replaceable>, <replaceable>moment_1</replaceable>, <replaceable>moment_2</replaceable> 
                            
<replaceable>&lt;unit&gt;</replaceable> ::= 
    YEAR | MONTH | WEEK | DAY | WEEKDAY | YEARDAY
  | HOUR | MINUTE | SECOND | MILLISECOND                            
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции DATEDIFF</title>
                        <varlistentry>
                            <term><replaceable>unit</replaceable></term>
                            <listitem>
                                <para>Составляющая даты/времени.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>monent_1</replaceable></term>
                            <listitem>
                                <para>Выражение типа DATE, TIME или TIMESTAMP.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>monent_2</replaceable></term>
                            <listitem>
                                <para>Выражение типа DATE, TIME или TIMESTAMP.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>BIGINT.</para>
                </formalpara>

                <para>Функция DATEDIFF возвращает количество лет, месяцев, недель, дней, часов,
                    минут, секунд или миллисекунд между двумя значениями даты/времени.</para>
                <para>Особенности использования: <itemizedlist spacing="compact">
                        <listitem>
                            <para>Параметры DATE и TIMESTAMP могут использоваться совместно.
                                Совместное использование типа TIME с типами DATE и TIMESTAMP не
                                разрешается;</para>
                        </listitem>
                        <listitem>
                            <para>С аргументом типа TIMESTAMP и DATE можно использовать любую
                                составляющую даты/времени
                                (<replaceable>&lt;unit&gt;</replaceable>);</para>
                        </listitem>
                        <listitem>
                            <para>Для типа данных TIME разрешается использовать только HOUR, MINUTE,
                                SECOND и MILLISECOND.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <note>
                    <para>
                        <itemizedlist spacing="compact">
                            <listitem>
                                <para>Функция DATEDIFF не проверяет разницу в более мелких
                                    составляющих даты/времени, чем задана в первом аргументе
                                        (<replaceable>&lt;unit&gt;</replaceable>). В результате
                                    получаем:
                                    <programlisting>
- DATEDIFF (YEAR, DATE '1-JAN-2009', DATE '31-DEC-2009') = 0, но 
- DATEDIFF (YEAR, DATE '31-DEC-2009', DATE '1-JAN-2010') = 1
                                </programlisting>
                                </para>
                            </listitem>
                            <listitem>
                                <para>Однако для более мелких составляющих даты/времени имеем:
                                    <programlisting>
- DATEDIFF (DAY, DATE '26-JUN-1908', DATE '11-SEP-1973') = 23818 
- DATEDIFF (DAY, DATE '30-NOV-1971', DATE '8-JAN-1972') = 39
                                </programlisting>
                                </para>
                            </listitem>
                            <listitem>
                                <para>Отрицательное значение функции говорит о том, что дата/время в
                                        <replaceable>moment_2</replaceable> меньше, чем в
                                        <replaceable>moment_1</replaceable>. </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </note>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции DATEDIFF</title>
                    <para><programlisting language="sql">
DATEDIFF (HOUR FROM CURRENT_TIMESTAMP TO TIMESTAMP '12-JUN-2059 06:00')
DATEDIFF (MINUTE FROM TIME '0:00' TO CURRENT_TIME)
DATEDIFF (MONTH, CURRENT_DATE, DATE '1-1-1900')
DATEDIFF (DAY FROM CURRENT_DATE TO CAST (? AS DATE))
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-datetime-dateadd">DATEADD</link>, <link
                            linkend="types-datetime-operation">Операции, использующие значения даты
                            и времени</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-datetime-extract">
                <info>
                    <title>EXTRACT</title>
                </info>
                <indexterm><primary>EXTRACT</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL, ESQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
EXTRACT (<replaceable>&lt;part&gt;</replaceable> FROM <replaceable>datetime</replaceable>) 
                            
<replaceable>&lt;part&gt;</replaceable> ::= 
    YEAR | MONTH | WEEK | DAY | WEEKDAY | YEARDAY
  | HOUR | MINUTE | SECOND | MILLISECOND                            
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции EXTRACT</title>
                        <varlistentry>
                            <term><replaceable>part</replaceable></term>
                            <listitem>
                                <para>Составляющая даты/времени.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>datetime</replaceable></term>
                            <listitem>
                                <para>Выражение типа DATE, TIME или TIMESTAMP.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>SMALLINT или NUNERIC.</para>
                </formalpara>

                <para>Функция EXTRACT извлекает составляющие даты и времени из типов данных DATE,
                    TIME и TIMESTAMP.</para>
                <para>
                    <table frame="all">
                        <title>Типы и диапазоны результатов функции EXTRACT</title>
                        <tgroup cols="4">
                            <colspec colname="c1" colnum="1" colwidth="1.0*" align="left"/>
                            <colspec colname="c2" colnum="2" colwidth="1.0*" align="left"/>
                            <colspec colname="c3" colnum="3" colwidth="1.0*" align="left"/>
                            <colspec colname="c4" colnum="4" colwidth="1.0*" align="left"/>
                            <thead>
                                <row>
                                    <entry align="center"> Составляющая даты/времени </entry>
                                    <entry align="center"> Тип </entry>
                                    <entry align="center"> Диапазон </entry>
                                    <entry align="center"> Комментарий </entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                    <entry> YEAR </entry>
                                    <entry> SMALLINT </entry>
                                    <entry> 1–9999 </entry>
                                    <entry> </entry>
                                </row>
                                <row>
                                    <entry> MONTH </entry>
                                    <entry> SMALLINT </entry>
                                    <entry> 1–12 </entry>
                                    <entry> </entry>
                                </row>
                                <row>
                                    <entry> WEEK </entry>
                                    <entry> SMALLINT </entry>
                                    <entry> 1–53 </entry>
                                    <entry> </entry>
                                </row>
                                <row>
                                    <entry> DAY </entry>
                                    <entry> SMALLINT </entry>
                                    <entry> 1–31 </entry>
                                    <entry> </entry>
                                </row>
                                <row>
                                    <entry> WEEKDAY </entry>
                                    <entry> SMALLINT </entry>
                                    <entry> 0–6 </entry>
                                    <entry> 0 = Воскресенье </entry>
                                </row>
                                <row>
                                    <entry> YEARDAY </entry>
                                    <entry> SMALLINT </entry>
                                    <entry> 0–365 </entry>
                                    <entry> 0 = 1 января </entry>
                                </row>
                                <row>
                                    <entry> HOUR </entry>
                                    <entry> SMALLINT </entry>
                                    <entry> 0–23 </entry>
                                    <entry> </entry>
                                </row>
                                <row>
                                    <entry> MINUTE </entry>
                                    <entry> SMALLINT </entry>
                                    <entry> 0–59 </entry>
                                    <entry> </entry>
                                </row>
                                <row>
                                    <entry> SECOND </entry>
                                    <entry> NUMERIC(9,4) </entry>
                                    <entry> 0.0000–59.9999 </entry>
                                    <entry> Включает в себя миллисекунды </entry>
                                </row>
                                <row>
                                    <entry> MILLISECOND </entry>
                                    <entry> NUMERIC(9,1) </entry>
                                    <entry> 0.0–999.9 </entry>
                                    <entry> </entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </table>
                </para>
                <note>
                    <para>Если составляющая даты/времени не присутствует в аргументе дата/время,
                        например SECOND в аргументе с типом DATE или YEAR в TIME, то функция вызовет
                        ошибку.</para>
                </note>
                <para>Из аргумента с типом данных DATE или TIMESTAMP можно извлекать номер недели. В
                    соответствии со стандартом ISO-8601 неделя начинается с понедельника и всегда
                    включает в себя 7 дней. Первой неделей года является первая неделя, у которой в
                    ней больше дней в новом году (по крайней мере, 4): дни 1-3 могут принадлежать
                    предыдущей неделе (52 или 53) прошлого года. По аналогии дни 1-3 текущего года
                    могут принадлежать 1 неделе следующего года. </para>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции EXTRACT</title>
                    <para><programlisting language="sql">
/* получить по дате номер квартала */
SELECT (EXTRACT(MONTH FROM CURRENT_TIMESTAMP)-1)/3+1
FROM RDB$DATABASE
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="types-datetime">Типы данных для работы с датой и
                            временем</link>. </para>
                </formalpara>
            </section>
        </section>
        <section xml:id="internalfunc-func-cast">
            <info>
                <title>Функции преобразования типов</title>
            </info>
            <para/>
            <section xml:id="internalfunc-func-cast-cast">
                <info>
                    <title>CAST</title>
                </info>
                <indexterm><primary>CAST</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL, ESQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
CAST(<replaceable>value</replaceable> | NULL AS <replaceable>&lt;type&gt;</replaceable>)
                            
<replaceable>&lt;type&gt;</replaceable> ::= 
    <replaceable>&lt;datatype&gt;</replaceable>
  | [TYPE OF] <replaceable>domain</replaceable>
  | TYPE OF COLUMN <replaceable>relname</replaceable>.<replaceable>colname</replaceable>

<replaceable>&lt;datatype&gt;</replaceable> ::= 
    {SMALLINT | INTEGER | BIGINT} 
  | {FLOAT | DOUBLE PRECISION} 
  | {DATE | TIME | TIMESTAMP}
  | {DECIMAL | NUMERIC} [(<replaceable>precision</replaceable> [, <replaceable>scale</replaceable>])] 
  | {CHAR | CHARACTER | CHARACTER VARYING | VARCHAR} [(<replaceable>size</replaceable>)]
    [CHARACTER SET <replaceable>charset</replaceable>]
  | {NCHAR | NATIONAL CHARACTER | NATIONAL CHAR} [VARYING] [(<replaceable>size</replaceable>)] 
  | BLOB [SUB_TYPE {<replaceable>subtype_num</replaceable> | <replaceable>subtype_name</replaceable>}] 
    [SEGMENT SIZE <replaceable>seglen</replaceable>] [CHARACTER SET <replaceable>charset</replaceable>]
  | BLOB [(<replaceable>seglen</replaceable> [, <replaceable>subtype_num</replaceable>])]   
                        </programlisting>
                    </para>
                </formalpara>
                <formalpara>
                    <title>Сокращённый синтаксис:</title>
                    <para>
                        <programlisting>
<replaceable>&lt;datatype&gt;</replaceable> '<replaceable>date/timestring</replaceable>'  
                            
<replaceable>&lt;datatype&gt;</replaceable> ::= DATE | TIME | TIMESTAMP                            
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции CAST</title>
                        <varlistentry>
                            <term><replaceable>value</replaceable></term>
                            <listitem>
                                <para>SQL выражение.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>datatype</replaceable></term>
                            <listitem>
                                <para>Тип данных SQL.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>domain</replaceable></term>
                            <listitem>
                                <para>Домен.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>relname</replaceable></term>
                            <listitem>
                                <para>Имя таблицы или представления. </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>colname</replaceable></term>
                            <listitem>
                                <para>Имя столбца таблицы или представления. </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>precision</replaceable></term>
                            <listitem>
                                <para>Точность. От 1 до 18. </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>scale</replaceable></term>
                            <listitem>
                                <para>Масштаб. От 0 до 18, должно быть меньше или равно
                                        <replaceable>precision</replaceable>. </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>size</replaceable></term>
                            <listitem>
                                <para>Максимальный размер строки в символах. </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>charset</replaceable></term>
                            <listitem>
                                <para>Набор символов. </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>subtype_num</replaceable></term>
                            <listitem>
                                <para>Номер подтипа BLOB. </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>subtype_name</replaceable></term>
                            <listitem>
                                <para>Мнемоника подтипа BLOB. </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>seqlen</replaceable></term>
                            <listitem>
                                <para>Размер сегмента, не может превышать 65535</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para><replaceable>&lt;type&gt;</replaceable>.</para>
                </formalpara>

                <para>Функция CAST служит для явного преобразования данных из одного типа данных в
                    другой тип данных или домен. Если это невозможно будет выдана ошибка.</para>
                <para>Сокращённый синтаксис поддерживается только для литералов даты и
                    времени.</para>
                <note>
                    <para>Сокращенный синтаксис вычисляется сразу во время синтаксического анализа,
                        в результате чего значение сохраняется до тех пор пока для оператора не
                        сделано unprepare. Для литералов даты и времени таких как '12-OCT-2012' это
                        не имеет никакого значения. Но для псевдо-переменных 'NOW', 'YESTERDAY',
                        'TODAY' и 'TOMORROW' вы можете получить не то, что хотите. Если вам нужно
                        значение, которое будет вычисляться при каждом вызове, используйте
                        CAST().</para>
                </note>
                <para>
                    <table>
                        <title>Допустимые преобразования для функции CAST</title>

                        <tgroup cols="2">
                            <thead>
                                <row>
                                    <entry align="center">Из типа</entry>
                                    <entry align="center">В тип</entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                    <entry align="left">
                                        <simplelist type="vert" columns="1">
                                            <member>Числовые типы</member>
                                        </simplelist>
                                    </entry>
                                    <entry align="left">
                                        <simplelist type="vert" columns="1">
                                            <member>Числовые типы</member>
                                            <member>[VAR]CHAR</member>
                                            <member>BLOB</member>
                                        </simplelist>
                                    </entry>
                                </row>
                                <row>
                                    <entry align="left">
                                        <simplelist type="vert" columns="1">
                                            <member>[VAR]CHAR</member>
                                            <member>BLOB</member>
                                        </simplelist>
                                    </entry>
                                    <entry align="left">
                                        <simplelist type="vert" columns="1">
                                            <member>[VAR]CHAR</member>
                                            <member>BLOB</member>
                                            <member>Числовые типы</member>
                                            <member>DATE</member>
                                            <member>TIME</member>
                                            <member>TIMESTAMP</member>
                                        </simplelist>
                                    </entry>
                                </row>
                                <row>
                                    <entry align="left">
                                        <simplelist type="vert" columns="1">
                                            <member>DATE</member>
                                            <member>TIME</member>
                                        </simplelist>
                                    </entry>
                                    <entry align="left">
                                        <simplelist type="vert" columns="1">
                                            <member>[VAR]CHAR</member>
                                            <member>BLOB</member>
                                            <member>TIMESTAMP</member>
                                        </simplelist>
                                    </entry>
                                </row>
                                <row>
                                    <entry align="left">
                                        <simplelist type="vert" columns="1">
                                            <member>TIMESTAMP</member>
                                        </simplelist>
                                    </entry>
                                    <entry align="left">
                                        <simplelist type="vert" columns="1">
                                            <member>[VAR]CHAR</member>
                                            <member>BLOB</member>
                                            <member>TIME</member>
                                            <member>DATE</member>
                                        </simplelist>
                                    </entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </table>
                </para>
                <para>Имейте ввиду, что иногда информация может быть потерянна, например, когда вы
                    преобразуете тип TIMESTAMP к DATE. Кроме того, тот факт, что типы совместимы для
                    функции CAST, ещё не гарантирует, что преобразование будет успешным. "CAST
                    (123456789 AS SMALLINT)" безусловно приведёт к ошибке, так же как и
                    "CAST('Judgement Day' as DATE)".</para>
                <formalpara>
                    <title>Примеры:</title>
                    <para>
                        <programlisting/> Полный синтаксис:
                        <programlisting language="sql">
select cast ('12' || '-June-' || '1959' as date) from rdb$database                        
                    </programlisting>
                        Сокращённый синтаксис для преобразование литералов дат/времени:
                        <programlisting language="sql">
update People set AgeCat = 'Old'
where BirthDate &lt; date '1-Jan-1943'                       
                    </programlisting>
                        Заметьте, что вы можете не использовать даже краткий синтаксис
                        преобразования в примере выше, т.к. Firebird поймёт из контекста (сравнение
                        с полем типа DATE) как интерпретировать строку:
                        <programlisting language="sql">
update People set AgeCat = 'Old'
where BirthDate &lt; '1-Jan-1943'                       
                    </programlisting>
                        Но это не всегда возможно. Преобразование в примере ниже не может быть
                        опущено, т.к. система будет пытаться преобразовать строку к числу. что бы
                        вычесть из неё число:
                        <programlisting language="sql">
select date 'today' - 7 from rdb$database                       
                    </programlisting>
                    </para>
                </formalpara>
                <para>Вы можете применить преобразование типа к параметрам оператора:
                    <programlisting language="sql">
cast (? as integer)                        
                    </programlisting>
                    Это дает вам контроль над типом полей ввода. Обратите внимание, что с
                    параметрами операторов, вы всегда должны использовать полный синтаксис
                    преобразования, сокращённый синтаксис не поддерживается. </para>
                <simplesect>
                    <title>Преобразование к домену или к его базовому типу</title>
                    <para>При преобразовании к домену должны быть удовлетворены любые ограничения
                        (NOT NULL и/или CHECK) объявленные для домена, иначе преобразование не будет
                        выполнено. Помните, что проверка CHECK проходит, если его вычисление даёт
                        TRUE или UNKNOWN (NULL). Для следующих операторов:
                        <programlisting language="sql">
create domain quint as int check (value >= 5000)
select cast (2000 as quint) from rdb$database -- (1)
select cast (8000 as quint) from rdb$database -- (2)
select cast (null as quint) from rdb$database -- (3)                       
                    </programlisting>
                        только (1) завершится с ошибкой. </para>
                    <para>При использовании модификатора TYPE OF выражение будет преобразовано к
                        базовому типу домена, игнорируя любые ограничения. Для домена quint,
                        объявленного выше, оба преобразования будут эквивалентны и оба будут успешно
                        выполнены:
                        <programlisting language="sql">
select cast (2000 as type of quint) from rdb$database
select cast (2000 as int) from rdb$database                      
                    </programlisting>
                    </para>
                    <para>При использовании TYPE OF с (VAR)CHAR типом, его набор символов и порядок
                        сортировки (collate) сохраняются.
                        <programlisting language="sql">
create domain iso20 varchar(20) character set iso8859_1;
create domain dunl20 varchar(20) character set iso8859_1 collate du_nl;
create table zinnen (zin varchar(20));
commit;
insert into zinnen values ('Deze');
insert into zinnen values ('Die');
insert into zinnen values ('die');
insert into zinnen values ('deze');
select cast(zin as type of iso20) from zinnen order by 1;
-- returns Deze -> Die -> deze -> die
select cast(zin as type of dunl20) from zinnen order by 1;
-- returns deze -> Deze -> die -> Die                    
                    </programlisting>
                    </para>
                    <warning>
                        <para>Если определение домена изменяется, то существующие преобразования к
                            домену или его типу могут стать ошибочными. Если такие преобразования
                            происходят в PSQL модулях, то их ошибки могут быть обнаружены. См. <link
                                linkend="valid">Поле RDB$VALID_BLR</link>. </para>
                    </warning>
                </simplesect>
                <simplesect>
                    <title>Преобразование к типу столбца</title>
                    <para>Разрешено преобразовывать выражение к типу столбца существующей таблицы
                        или представления. При этом будет использован только сам тип, для строковых
                        типов будет использован так же набор символов, но не последовательность
                        сортировки. Ограничения и значения по умолчанию исходного столюца не
                        применяются.
                        <programlisting language="sql">
create table ttt (
  s varchar(40) character set utf8 collate unicode_ci_ai
);
commit;  
select cast ('Jag har många vänner' as type of column ttt.s) 
from rdb$database;
                    </programlisting>
                    </para>
                    <warning>
                        <para>
                            <itemizedlist>
                                <listitem>
                                    <para>Для текстовых типов, набор символов и порядок сортировки
                                        сохраняются при преобразовании так же, как при
                                        преобразовании в домен. Тем не менее, из-за ошибки, порядок
                                        сортировки не всегда принимается во внимание при сравнении
                                        (например, в предикатах сравнения). В тех случаях, когда
                                        порядок сортировки важен, тщательно тестируйте свой код
                                        перед развёртыванием! Это ошибка исправлена в Firebird
                                        3.</para>
                                </listitem>
                                <listitem>
                                    <para>Если определение столбца изменяется, то существующие
                                        преобразования к его типу могут стать ошибочными. Если такие
                                        преобразования происходят в PSQL модулях, то их ошибки могут
                                        быть обнаружены. См. <link linkend="valid">Поле
                                            RDB$VALID_BLR</link>.</para>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </warning>
                    <formalpara>
                        <title>См. также:</title>

                        <para>
                            <link linkend="types-cast-explicit">Явное преобразование типов
                                данных</link>. </para>
                    </formalpara>
                </simplesect>
            </section>
        </section>
        <section xml:id="internalfunc-func-bit">
            <info>
                <title>Функции побитовых операций</title>
            </info>
            <para/>
            <section xml:id="internalfunc-func-bit-bin_and">
                <info>
                    <title>BIN_AND</title>
                </info>
                <indexterm><primary>BIN_AND</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
BIN_AND (<replaceable>number</replaceable> [, <replaceable>number</replaceable> ...])
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции BIN_AND</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Целое число.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>INTEGER или BIGINT.</para>
                </formalpara>

                <para>Функция BIN_AND возвращает результат побитовой операции AND (И)
                    аргументов.</para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-bit-bin_or">BIN_OR</link>, <link
                            linkend="internalfunc-func-bit-bin_xor">BIN_XOR</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-bit-bin_not">
                <info>
                    <title>BIN_NOT</title>
                    <keywordset>
                        <keyword>BIN_NOT</keyword>
                    </keywordset>
                </info>
                <indexterm><primary>BIN_NOT</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
BIN_NOT (<replaceable>number</replaceable>)
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции BIN_NOT</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Целое число.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>INTEGER или BIGINT.</para>
                </formalpara>

                <para>Функция BIN_NOT возвращает результат побитовой операции NOT над
                    аргументом.</para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-bit-bin_or">BIN_OR</link>, <link
                            linkend="internalfunc-func-bit-bin_and">BIN_AND</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-bit-bin_or">
                <info>
                    <title>BIN_OR</title>
                </info>
                <indexterm><primary>BIN_OR</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
BIN_OR (<replaceable>number</replaceable> [, <replaceable>number</replaceable> ...])
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции BIN_OR</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Целое число.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>INTEGER или BIGINT.</para>
                </formalpara>

                <para>Функция BIN_OR возвращает результат побитовой операции OR (ИЛИ) аргументов. </para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-bit-bin_and">BIN_AND</link>, <link
                            linkend="internalfunc-func-bit-bin_xor">BIN_XOR</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-bit-bin_shl">
                <info>
                    <title>BIN_SHL</title>
                </info>
                <indexterm><primary>BIN_SHL</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
BIN_SHL (<replaceable>number</replaceable>, <replaceable>shift</replaceable>)
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции BIN_SHL</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Целое число.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>shift</replaceable></term>
                            <listitem>
                                <para>Количество бит, на которое смещается значение
                                        <replaceable>number</replaceable>. </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>BIGINT.</para>
                </formalpara>

                <para>Функция BIN_SHL возвращает первый параметр, побитно смещённый влево на
                    значение второго параметра. </para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-bit-bin_shr">BIN_SHR</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-bit-bin_shr">
                <info>
                    <title>BIN_SHR</title>
                </info>
                <indexterm><primary>BIN_SHR</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
BIN_SHR (<replaceable>number</replaceable>, <replaceable>shift</replaceable>)
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции BIN_SHR</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Целое число.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>shift</replaceable></term>
                            <listitem>
                                <para>Количество бит на которое смещается значение number. </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>BIGINT.</para>
                </formalpara>

                <para>Функция BIN_SHR возвращает первый параметр, побитно смещённый вправо на
                    значение второго параметра. </para>
                <note>
                    <para>Выполняемая операция является арифметическим сдвигом вправо (SAR), а это
                        означает, что знак первого операнда всегда сохраняется.</para>
                </note>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-bit-bin_shl">BIN_SHL</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-bit-bin_xor">
                <info>
                    <title>BIN_XOR</title>
                </info>
                <indexterm><primary>BIN_XOR</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
BIN_XOR (<replaceable>number</replaceable> [, <replaceable>number</replaceable> ...])
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции BIN_XOR</title>
                        <varlistentry>
                            <term><replaceable>number</replaceable></term>
                            <listitem>
                                <para>Целое число.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>INTEGER или BIGINT.</para>
                </formalpara>

                <para>Функция BIN_XOR возвращает результат побитовой операции XOR аргументов. </para>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-bit-bin_and">BIN_AND</link>, <link
                            linkend="internalfunc-func-bit-bin_or">BIN_OR</link>. </para>
                </formalpara>
            </section>
        </section>
        <section xml:id="internalfunc-func-uuid">
            <info>
                <title>Функции для работы с UUID</title>
            </info>
            <para/>
            <section xml:id="internalfunc-func-uuid-char_to_uuid">
                <info>
                    <title>CHAR_TO_UUID</title>
                </info>
                <indexterm><primary>CHAR_TO_UUID</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
CHAR_TO_UUID (<replaceable>ascii_uuid</replaceable>) 
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции CHAR_TO_UUID</title>
                        <varlistentry>
                            <term><replaceable>ascii_uuid</replaceable></term>
                            <listitem>
                                <para>36-символьное представление UUID. '-' (дефис) в положениях 9,
                                    14, 19 и 24; допустимые шестнадцатеричные цифры в любых других
                                    позициях.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>CHAR(16) CHARACTER SET OCTETS.</para>
                </formalpara>

                <para>Функция CHAR_TO_UUID преобразует читабельную 36-ти символьную символику UUID к
                    соответствующему 16-ти байтовому значению UUID. </para>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции CHAR_TO_UUID</title>
                    <para><programlisting language="sql">
SELECT CHAR_TO_UUID('A0bF4E45-3029-2a44-D493-4998c9b439A3') FROM rdb$database
-- returns A0BF4E4530292A44D4934998C9B439A3 (16-byte string)

SELECT CHAR_TO_UUID('A0bF4E45-3029-2A44-X493-4998c9b439A3') FROM rdb$database
-- error: -Human readable UUID argument for CHAR_TO_UUID must
-- have hex digit at position 20 instead of "X (ASCII 88)"
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-uuid-gen_uuid">GEN_UUID</link>, <link
                            linkend="internalfunc-func-uuid-uuid_to_char">UUID_TO_CHAR</link>.
                    </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-uuid-gen_uuid">
                <info>
                    <title>GEN_UUID</title>
                </info>
                <indexterm><primary>GEN_UUID</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
GEN_UUID() 
                        </programlisting>
                    </para>
                </formalpara>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>CHAR(16) CHARACTER SET OCTETS.</para>
                </formalpara>

                <para>Функция возвращает универсальный уникальный идентификатор ID в виде 16-байтной
                    строки символов. До версии Firebird 2.5.2 это была полностью случайная строка,
                    что не отвечало требованиям стандарта RFC-4122. Начиная с версии 2.5.2, функция
                    возвращает строку UUID 4-ой версии, где несколько битов зарезервированы, а
                    остальные являются случайными.</para>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции GEN_UUID</title>
                    <para><programlisting language="sql">
SELECT GEN_UUID() FROM RDB$DATABASE

-- результат (до версии Firebird 2.5.2):
	017347BFE212B2479C00FA4323B36320 (16-байтная строка)
	
-- результат (начиная с версии Firebird 2.5.2):
	XXXXXXXX-XXXX-4XXX-YXXX-XXXXXXXXXXXX 
	где 4 это номер версии, а Y может принимать значение 8, 9, A или B.
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-uuid-char_to_uuid">CHAR_TO_UUID</link>,
                            <link linkend="internalfunc-func-uuid-uuid_to_char">UUID_TO_CHAR</link>.
                    </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-uuid-uuid_to_char">
                <info>
                    <title>UUID_TO_CHAR</title>
                </info>
                <indexterm><primary>UUID_TO_CHAR</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
UUID_TO_CHAR (<replaceable>uuid</replaceable>) 
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции UUID_TO_CHAR</title>
                        <varlistentry>
                            <term><replaceable>uuid</replaceable></term>
                            <listitem>
                                <para>16-байтный UUID.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>CHAR(36).</para>
                </formalpara>

                <para>Функция UUID_TO_CHAR конвертирует 16-ти байтный UUID в его 36-ти знаковое
                    ASCII человекочитаемое представление. Тип возвращаемого значения
                    CHAR(36).</para>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции UUID_TO_CHAR</title>
                    <para><programlisting language="sql">
SELECT UUID_TO_CHAR(GEN_UUID()) FROM RDB$DATABASE;

SELECT UUID_TO_CHAR(x'876C45F4569B320DBCB4735AC3509E5F') FROM RDB$DATABASE;
-- returns '876C45F4-569B-320D-BCB4-735AC3509E5F'

SELECT UUID_TO_CHAR(gen_uuid()) FROM RDB$DATABASE;
-- returns e.g. '680D946B-45FF-DB4E-B103-BB5711529B86'

SELECT UUID_TO_CHAR('Firebird swings!') FROM RDB$DATABASE;
-- returns '46697265-6269-7264-2073-77696E677321'
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-uuid-gen_uuid">GEN_UUID</link>, <link
                            linkend="internalfunc-func-uuid-char_to_uuid">CHAR_TO_UUID</link>.
                    </para>
                </formalpara>
            </section>
        </section>
        <section xml:id="internalfunc-func-gen">
            <info>
                <title>Функции для работы с генераторами (последовательностями)</title>
            </info>
            <para/>
            <section xml:id="internalfunc-func-gen-gen_id">
                <info>
                    <title>GEN_ID</title>
                </info>
                <indexterm><primary>GEN_ID</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL, ESQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
GEN_ID(<replaceable>gen_name</replaceable>, <replaceable>step</replaceable>) 
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции GEN_ID</title>
                        <varlistentry>
                            <term><replaceable>gen_name</replaceable></term>
                            <listitem>
                                <para>Имя генератора (последовательности).</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>step</replaceable></term>
                            <listitem>
                                <para>Шаг приращения.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>BIGINT.</para>
                </formalpara>

                <para>Функция GEN_ID увеличивает значение генератора или последовательности и
                    возвращает новое значение.</para>
                <note>
                    <para>Если значение параметра <replaceable>step</replaceable> меньше нуля,
                        произойдёт уменьшение значения генератора. Внимание! Следует быть крайне
                        аккуратным при таких манипуляциях в базе данных, они могут привести к потере
                        целостности данных. Если <replaceable>step</replaceable> равен 0, функция не
                        будет ничего делать со значением генератора и вернёт его текущее значение.
                    </para>
                </note>
                <para>Начиная с Firebird 2.0 для получения следующего значение последовательности
                    (генератора) стало доступно использование оператора NEXT VALUE FOR.</para>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции GEN_ID</title>
                    <para><programlisting language="sql">
NEW.ID = GEN_ID (GEN_TABLE_ID, 1);
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="common-expr-nextvalue">NEXT VALUE FOR</link>, <link
                            linkend="ddl-sequence">SEQUENCE (GENERATOR)</link>, <link
                            linkend="ddl-sequence-alter">ALTER SEQUENCE</link>, <link
                            linkend="ddl-sequence-setgen">SET GENERATOR</link>. </para>
                </formalpara>
            </section>
        </section>
        <section xml:id="internalfunc-func-case">
            <info>
                <title>Условные функции</title>
            </info>
            <para/>

            <section xml:id="internalfunc-func-case-coalesce">
                <info>
                    <title>COALESCE</title>
                </info>
                <indexterm><primary>COALESCE</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
COALESCE(<replaceable>expr1</replaceable>, <replaceable>expr2</replaceable> [, <replaceable>exprN</replaceable> ...]) 
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции COALESCE</title>
                        <varlistentry>
                            <term><replaceable>expr1</replaceable>, <replaceable>expr2</replaceable>
                                ... <replaceable>exprN</replaceable></term>
                            <listitem>
                                <para>Выражения любого совместимого типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>тот же что и первый аргумент функции
                        <replaceable>expr1</replaceable>.</para>
                </formalpara>

                <para>Функция COALESCE принимает два или более аргумента возвращает значение первого
                    NOT NULL аргумента. Если все аргументы имеют значение NULL, то и результат будет
                    NULL.</para>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции COALESCE</title>
                    <para><programlisting language="sql">
SELECT 
  COALESCE(PE.NICKNAME, PE.FIRSTNAME, 'Mr./Mrs.') ||
  ' ' || PE.LASTNAME AS FULLNAME
FROM PERSONS PE
                </programlisting>
                        В данном примере предпринимается попытка использовать все имеющиеся данные
                        для составления полного имени. Выбирается поле NICKNAME из таблицы PERSONS.
                        Если оно имеет значение NULL, то берётся значение из поля FIRSTNAME. Если и
                        оно имеет значение NULL, то используется строка 'Mr./Mrs.'. Затем к значению
                        функции COALESCE фамилия (поле LASTNAME). Обратите внимание, что эта схема
                        нормально работает, только если выбираемые поля имеют значение NULL или не
                        пустое значение: если одно из них является пустой строкой, то именно оно и
                        возвратится в качестве значения функции COALESCE. </para>
                </example>
                <example>
                    <title>Использование функции COALESCE с агрегатными функциями</title>
                    <para><programlisting language="sql">
-- в случае получения при суммировании NULL, вернёт 0.                        
SELECT coalesce (sum (q), 0) 
FROM bills 
WHERE ...
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="common-expr-cond-case">CASE</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-case-decode">
                <info>
                    <title>DECODE</title>
                </info>
                <indexterm><primary>DECODE</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
DECODE(<replaceable>testexpr</replaceable>, 
       <replaceable>expr1</replaceable>, <replaceable>result1</replaceable>
       [, <replaceable>expr2</replaceable>, <replaceable>result2</replaceable> ...]
       [, <replaceable>defaultresult</replaceable>]) 
                </programlisting>
                        эквивалентная конструкция CASE
                        <programlisting>
CASE <replaceable>testexpr</replaceable> 
  WHEN <replaceable>expr1</replaceable> THEN <replaceable>result1</replaceable>
  [WHEN <replaceable>expr2</replaceable> THEN <replaceable>result2</replaceable> ...]
  [ELSE <replaceable>defaultresult</replaceable>]
END                            
                </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции DECODE</title>
                        <varlistentry>
                            <term><replaceable>testexpr</replaceable></term>
                            <listitem>
                                <para>Выражения любого совместимого типа, которое сравнивается с
                                    выражениями <replaceable>expr1</replaceable>,
                                        <replaceable>expr2</replaceable> ...
                                        <replaceable>exprN</replaceable></para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>expr1</replaceable>, <replaceable>expr2</replaceable>
                                ... <replaceable>exprN</replaceable></term>
                            <listitem>
                                <para>Выражения любого совместимого типа, с которыми сравнивают с
                                    выражением <replaceable>testexpr</replaceable>.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>result1</replaceable>,
                                    <replaceable>result2</replaceable> ...
                                    <replaceable>resultN</replaceable></term>
                            <listitem>
                                <para>Возвращаемые выражения любого типа.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>defaultresult</replaceable></term>
                            <listitem>
                                <para>Выражения, возвращаемое если ни одно из условий не было
                                    выполнено.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>тот же что и первый результат <replaceable>result1</replaceable>.</para>
                </formalpara>

                <para>Данная функция эквивалентна конструкции <link
                        linkend="common-expr-cond-case-simple">Простой CASE</link>, в которой
                    заданное выражение сравнивается с другими выражениями до нахождения совпадения.
                    Результатом является значение, указанное после выражения, с которым найдено
                    совпадение. Если совпадений не найдено, то возвращается значение по умолчанию
                    (если оно, конечно, задано – в противном случае возвращается NULL).</para>
                <caution>
                    <para>Совпадение эквивалентно оператору &quot;=&quot;, т.е. если
                            <replaceable>testexpr</replaceable> имеет значение NULL, то он не
                        соответствует ни одному из <replaceable>expr</replaceable>, даже тем,
                        которые имеют значение NULL. </para>
                </caution>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции DECODE</title>
                    <para><programlisting language="sql">
SELECT 
  name, 
  age,
  decode (upper(sex),
          'M', 'М',
          'F', 'Ж',
          'не указано') AS sexname,
  UID 
FROM people
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="common-expr-cond-case">CASE</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-case-iif">
                <info>
                    <title>IIF</title>
                </info>
                <indexterm><primary>IIF</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
IIF(<replaceable>&lt;condition&gt;</replaceable>, <replaceable>resultT</replaceable>, <replaceable>resultF</replaceable>) 
                </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции IIF</title>
                        <varlistentry>
                            <term><replaceable>condition</replaceable></term>
                            <listitem>
                                <para>Выражение логического типа.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>resultT</replaceable></term>
                            <listitem>
                                <para>Возвращаемое значение, если
                                        <replaceable>condition</replaceable> является
                                    истинным.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>resultF</replaceable></term>
                            <listitem>
                                <para>Возвращаемое значение, если
                                        <replaceable>condition</replaceable> является ложным.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>тот же что и аргумент функции <replaceable>resultT</replaceable>.</para>
                </formalpara>

                <para>Функция IIF имеет три аргумента. Если первый аргумент является истиной, то
                    результатом будет второй параметр, в противном случае результатом будет третий
                    параметр.</para>
                <para>По сути, функция IIF это короткая запись оператора CASE
                    <programlisting>
CASE WHEN <replaceable>&lt;condition&gt;</replaceable> THEN <replaceable>resultT</replaceable> ELSE <replaceable>resultF</replaceable> END                        
                    </programlisting>
                    Оператор IIF также можно сравнить в тройным оператором "?:" в C-подобных языках. </para>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции IIF</title>
                    <para><programlisting language="sql">
SELECT IIF(SEX = 'M', 'Sir', 'Madam') FROM CUSTOMERS
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="common-expr-cond-case">CASE</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-case-maxvalue">
                <info>
                    <title>MAXVALUE</title>
                </info>
                <indexterm><primary>MAXVALUE</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
MAXVALUE(<replaceable>expr1</replaceable> [, <replaceable>exprN</replaceable> ...]) 
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции MAXVALUE</title>
                        <varlistentry>
                            <term><replaceable>expr1</replaceable> ...
                                    <replaceable>exprN</replaceable></term>
                            <listitem>
                                <para>Выражения любого совместимого типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>тот же что и первый аргумент функции
                        <replaceable>expr1</replaceable>.</para>
                </formalpara>

                <para>Возвращает максимальное значение из входного списка чисел, строк или
                    параметров с типом DATE/TIME/TIMESTAMP.</para>
                <note>
                    <para>Если один или более входных параметров имеют значение NULL, то результатом
                        функции MAXVALUE тоже будет NULL в отличие от агрегатной функции MAX.</para>
                </note>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции MAXVALUE</title>
                    <para><programlisting language="sql">
SELECT MAXVALUE(PRICE_1, PRICE_2) AS PRICE
FROM PRICELIST
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-case-minvalue">MINVALUE</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-case-minvalue">
                <info>
                    <title>MINVALUE</title>
                </info>
                <indexterm><primary>MINVALUE</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
MINVALUE(<replaceable>expr1</replaceable> [, <replaceable>exprN</replaceable> ...]) 
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции MINVALUE</title>
                        <varlistentry>
                            <term><replaceable>expr1</replaceable> ...
                                    <replaceable>exprN</replaceable></term>
                            <listitem>
                                <para>Выражения любого совместимого типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>тот же что и первый аргумент функции
                        <replaceable>expr1</replaceable>.</para>
                </formalpara>

                <para>Возвращает минимальное значение из входного списка чисел, строк или параметров
                    с типом DATE/TIME/TIMESTAMP.</para>
                <note>
                    <para>Если один или более входных параметров имеют значение NULL, то результатом
                        функции MINVALUE тоже будет NULL в отличие от агрегатной функции MIN.</para>
                </note>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции MINVALUE</title>
                    <para><programlisting language="sql">
SELECT MINVALUE(PRICE_1, PRICE_2) AS PRICE
FROM PRICELIST
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-case-maxvalue">MAXVALUE</link>. </para>
                </formalpara>
            </section>
            <section xml:id="internalfunc-func-case-nullif">
                <info>
                    <title>NULLIF</title>
                </info>
                <indexterm><primary>NULLIF</primary></indexterm>
                <formalpara>
                    <title>Доступно в:</title>

                    <para>DSQL, PSQL.</para>
                </formalpara>
                <formalpara>
                    <title>Синтаксис:</title>
                    <para>
                        <programlisting>
NULLIF(<replaceable>expr1</replaceable>, <replaceable>expr2</replaceable>) 
                        </programlisting>
                    </para>
                </formalpara>
                <para>
                    <variablelist>
                        <title>Параметры функции NULLIF</title>
                        <varlistentry>
                            <term><replaceable>expr1</replaceable>,
                                <replaceable>expr2</replaceable></term>
                            <listitem>
                                <para>Выражения любого совместимого типа.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <formalpara>
                    <title>Тип возвращаемого результата:</title>
                    <para>тот же что и первый аргумент функции
                        <replaceable>expr1</replaceable>.</para>
                </formalpara>

                <para>Функция возвращает значение первого аргумента, если он неравен второму. В
                    случае равенства аргументов возвращается NULL.</para>
                <para><emphasis>Примеры:</emphasis></para>
                <example>
                    <title>Использование функции NULLIF</title>
                    <para><programlisting language="sql">
/* запрос вернёт среднее значение поля weight по таблице, 
   за исключением строк, где он не указан (равен -1). 
   Если бы не было этой функции простой оператор avg(weight) 
   вернул бы некорректное значение */                        
SELECT AVG(NULLIF(weight, -1)) FROM cargo;
                </programlisting></para>
                </example>
                <formalpara>
                    <title>См. также:</title>

                    <para>
                        <link linkend="internalfunc-func-case-coalesce">COALESCE</link>, <link
                            linkend="common-expr-cond-case">CASE</link>. </para>
                </formalpara>
            </section>
        </section>
    </section>
    <section xml:id="internalfunc-agg">
        <info>
            <title>Агрегатные функции</title>
        </info>
        <para>Агрегатные функции выполняют вычисление на наборе значений и возвращают одиночное
            значение. Агрегатные функции, за исключением COUNT, не учитывают значения NULL.
            Агрегатные функции часто используются совместно с предложением GROUP BY.</para>
        <para>Агрегатные функции могут быть использованы в качестве выражений только в следующих
            случаях: <itemizedlist spacing="compact">
                <listitem>
                    <para>Список выбора инструкции SELECT (вложенный или внешний запрос);</para>
                </listitem>
                <listitem>
                    <para>Предложение HAVING.</para>
                </listitem>
            </itemizedlist>
        </para>
        <section xml:id="internalfunc-agg-avg">
            <info>
                <title>AVG</title>
            </info>
            <indexterm><primary>AVG</primary></indexterm>
            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
AVG([ALL | DISTINCT] <replaceable>&lt;expr&gt;</replaceable>)                
                </programlisting>
                </para>
            </formalpara>
            <para>
                <variablelist>
                    <title>Параметры функции AVG</title>
                    <varlistentry>
                        <term><replaceable>expr</replaceable></term>
                        <listitem>
                            <para>Выражение. Может содержать столбец таблицы, константу, переменную,
                                выражение, неагрегатную функцию или UDF, которая возвращает числовой
                                тип данных. Агрегатные функции в качестве выражения не
                                допускаются.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>тот же что и аргумент функции <replaceable>expr</replaceable>.</para>
            </formalpara>

            <para>Функция AVG возвращает среднее значение для группы. Значения NULL
                пропускаются.</para>
            <para>Параметр ALL применяет агрегатную функцию ко всем значениям. ALL является
                параметром по умолчанию. Параметр DISTINCT указывает на то, что функция AVG будет
                выполнена только для одного экземпляра каждого уникального значения, независимо от
                того, сколько раз встречается это значение.</para>
            <para>В случае если выборка записей пустая или содержит только значения NULL, результат
                будет содержать NULL.</para>
            <para><emphasis>Примеры:</emphasis></para>
            <example>
                <title>Использование функции AVG</title>
                <para><programlisting language="sql">
SELECT 
  dept_no,
  AVG(salary)
FROM employee
GROUP BY dept_no
                </programlisting></para>
            </example>
            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="dml-select">SELECT</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-agg-count">
            <info>
                <title>COUNT</title>
            </info>
            <indexterm><primary>COUNT</primary></indexterm>
            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
COUNT({[ALL | DISTINCT] <replaceable>&lt;expr&gt;</replaceable> | *})                 
                </programlisting>
                </para>
            </formalpara>
            <para>
                <variablelist>
                    <title>Параметры функции COUNT</title>
                    <varlistentry>
                        <term><replaceable>expr</replaceable></term>
                        <listitem>
                            <para>Выражение. Может содержать столбец таблицы, константу, переменную,
                                выражение, неагрегатную функцию или UDF. Агрегатные функции в
                                качестве выражения не допускаются.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>INTEGER.</para>
            </formalpara>

            <para>Функция COUNT возвращает количество значений в группе, которые не являются
                NULL.</para>
            <para>При указании DISTINCT из выборки устраняются дубликаты, ALL является значением по
                умолчанию для всех выборки значений не NULL.</para>
            <para>Если вместо выражения <replaceable>expr</replaceable> указана звёздочка (*), то
                будут подсчитаны все строки. Функция COUNT(*) не принимает параметры и не может
                использоваться с ключевым словом DISTINCT. Для функции COUNT(*) не нужен параметр
                    <replaceable>expr</replaceable>, так как по определению она не использует
                сведения о каких-либо конкретных столбцах. Функция COUNT(*) возвращает количество
                строк в указанной таблице, не отбрасывая дублированные строки. Она подсчитывает
                каждую строку отдельно. При этом учитываются и строки, содержащие значения
                NULL.</para>
            <para>Для пустой выборки данных или если при выборке окажутся одни значения, содержащие
                NULL, функция возвратит значение равное 0.</para>
            <para><emphasis>Примеры:</emphasis></para>
            <example>
                <title>Использование функции COUNT</title>
                <para><programlisting language="sql">
SELECT 
  dept_no,
  COUNT(*) AS cnt,
  COUNT(DISTINCT name) AS cnt_name
FROM employee
GROUP BY dept_no
                </programlisting></para>
            </example>
            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="dml-select">SELECT</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-agg-list">
            <info>
                <title>LIST</title>
            </info>
            <indexterm><primary>LIST</primary></indexterm>
            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
LIST([ALL | DISTINCT] <replaceable>&lt;expr&gt;</replaceable> [, <replaceable>separator</replaceable>])                  
                </programlisting>
                </para>
            </formalpara>
            <para>
                <variablelist>
                    <title>Параметры функции LIST</title>
                    <varlistentry>
                        <term><replaceable>expr</replaceable></term>
                        <listitem>
                            <para>Выражение. Может содержать столбец таблицы, константу, переменную,
                                выражение, неагрегатную функцию или UDF, которая возвращает
                                строковый тип данных или BLOB. Поля типа дата / время и числовые
                                преобразуются к строке. Агрегатные функции в качестве выражения не
                                допускаются.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><replaceable>separator</replaceable></term>
                        <listitem>
                            <para>Разделитель. Выражение строкового типа. По умолчанию разделителем
                                является запятая.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>BLOB.</para>
            </formalpara>

            <para>Функция LIST возвращает строку, содержащую значения элементов выборки, которые не
                равны NULL. При пустой выборке функция возвратит NULL. Тип возвращаемого значения
                текстовый BLOB за исключением тех случаев, когда выражением являются BLOB других
                подтипов.</para>
            <para>ALL является опцией по умолчанию. При ней обрабатываются все значения в выборке,
                не содержащие NULL. При указании DISTINCT из выборки устраняются дубликаты.</para>
            <para>Значения выражения <replaceable>expr</replaceable> и разделитель
                    <replaceable>separator</replaceable> поддерживают тип данных BLOB любого размера
                и набора символов. Поля типа дата / время и числовые перед проведением операции
                конкатенации преобразуются в строки.</para>
            <note>
                <para>Порядок конкатенации строк определяется порядком чтения записей из источников,
                    который в общем случае не определён. Для придания списку необходимого порядка вы
                    можете предварительно упорядочить источник данных, например с помощью
                    производной таблицы.</para>
            </note>
            <para><emphasis>Примеры:</emphasis></para>
            <example>
                <title>Использование функции LIST</title>
                <para><programlisting language="sql">
-- Получение списка, порядок не определён                    
SELECT LIST (display_name, '; ') 
FROM GR_WORK;          

-- Получение списка в алфавитном порядке
SELECT LIST (display_name, '; ') 
FROM (SELECT display_name 
      FROM GR_WORK 
      ORDER BY display_name);
                </programlisting></para>
            </example>
            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="dml-select">SELECT</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-agg-max">
            <info>
                <title>MAX</title>
            </info>
            <indexterm><primary>MAX</primary></indexterm>
            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
MAX([ALL | DISTINCT] <replaceable>&lt;expr&gt;</replaceable>)               
                </programlisting>
                </para>
            </formalpara>
            <para>
                <variablelist>
                    <title>Параметры функции MAX</title>
                    <varlistentry>
                        <term><replaceable>expr</replaceable></term>
                        <listitem>
                            <para>Выражение. Может содержать столбец таблицы, константу, переменную,
                                выражение, неагрегатную функцию или UDF. Агрегатные функции в
                                качестве выражения не допускаются.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>тот же что и аргумент функции <replaceable>expr</replaceable>.</para>
            </formalpara>

            <para>Функция MAX возвращает максимальный элемент выборки, которые не равны NULL. При
                пустой выборке, или при выборке из одних NULL функция возвратит NULL. Если аргумент
                функции строка, то функция вернёт значение, которое окажется последним в сортировке
                при применении COLLATE.</para>
            <note>
                <para>Параметр DISTINCT не имеет смысла при использовании функцией MAX и доступен
                    только для совместимости со стандартом. </para>
            </note>
            <para><emphasis>Примеры:</emphasis></para>
            <example>
                <title>Использование функции MAX</title>
                <para><programlisting language="sql">
SELECT 
  dept_no,
  MAX(salary)
FROM employee
GROUP BY dept_no
                </programlisting></para>
            </example>
            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="dml-select">SELECT</link>, <link linkend="internalfunc-agg-min"
                        >MIN</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-agg-min">
            <info>
                <title>MIN</title>
            </info>
            <indexterm><primary>MIN</primary></indexterm>
            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
MIN([ALL | DISTINCT] <replaceable>&lt;expr&gt;</replaceable>)                
                </programlisting>
                </para>
            </formalpara>
            <para>
                <variablelist>
                    <title>Параметры функции MIN</title>
                    <varlistentry>
                        <term><replaceable>expr</replaceable></term>
                        <listitem>
                            <para>Выражение. Может содержать столбец таблицы, константу, переменную,
                                выражение, неагрегатную функцию или UDF. Агрегатные функции в
                                качестве выражения не допускаются.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>тот же что и аргумент функции <replaceable>expr</replaceable>.</para>
            </formalpara>

            <para>Функция MIN возвращает минимальный элемент выборки, которые не равны NULL. При
                пустой выборке, или при выборке из одних NULL функция возвратит NULL. Если аргумент
                функции строка, то функция вернёт значение, которое окажется первым в сортировке при
                применении COLLATE.</para>
            <note>
                <para>Параметр DISTINCT не имеет смысла при использовании функцией MIN и доступен
                    только для совместимости со стандартом. </para>
            </note>
            <para><emphasis>Примеры:</emphasis></para>
            <example>
                <title>Использование функции MIN</title>
                <para><programlisting language="sql">
SELECT 
  dept_no,
  MIN(salary)
FROM employee
GROUP BY dept_no
                </programlisting></para>
            </example>
            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="dml-select">SELECT</link>, <link linkend="internalfunc-agg-max"
                        >MAX</link>. </para>
            </formalpara>
        </section>
        <section xml:id="internalfunc-agg-sum">
            <info>
                <title>SUM</title>
            </info>
            <indexterm><primary>SUM</primary></indexterm>
            <formalpara>
                <title>Доступно в:</title>

                <para>DSQL.</para>
            </formalpara>
            <formalpara>
                <title>Синтаксис:</title>
                <para>
                    <programlisting>
SUM([ALL | DISTINCT] <replaceable>&lt;expr&gt;</replaceable>)                
                </programlisting>
                </para>
            </formalpara>
            <para>
                <variablelist>
                    <title>Параметры функции SUM</title>
                    <varlistentry>
                        <term><replaceable>expr</replaceable></term>
                        <listitem>
                            <para>Выражение. Может содержать столбец таблицы, константу, переменную,
                                выражение, неагрегатную функцию или UDF, которая возвращает числовой
                                тип данных. Агрегатные функции в качестве выражения не
                                допускаются.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
            <formalpara>
                <title>Тип возвращаемого результата:</title>
                <para>тот же что и аргумент функции <replaceable>expr</replaceable>.</para>
            </formalpara>

            <para>Функция SUM возвращает сумму элементов выборки, которые не равны NULL. При пустой
                выборке, или при выборке из одних NULL функция возвратит NULL.</para>
            <para>ALL является опцией по умолчанию. При ней обрабатываются все значения из выборки,
                не содержащие NULL. При указании DISTINCT из выборки устраняются дубликаты, после
                осуществляется подсчёт.</para>
            <para><emphasis>Примеры:</emphasis></para>
            <example>
                <title>Использование функции SUM</title>
                <para><programlisting language="sql">
SELECT 
  dept_no,
  SUM(salary)
FROM employee
GROUP BY dept_no
                </programlisting></para>
            </example>
            <formalpara>
                <title>См. также:</title>

                <para>
                    <link linkend="dml-select">SELECT</link>. </para>
            </formalpara>
        </section>
    </section>
</chapter>
